// src/components/GameControls.tsx - –≠–õ–ï–ú–ï–ù–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ì–†–û–ô

import React, { useMemo, useCallback } from 'react';
import { Card, Button, Alert } from 'react-bootstrap';
import { Card as CardType } from '../../../packages/shared/src/types';

// ===== –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

/**
 * Props –¥–ª—è GameControls
 */
export interface GameControlsProps {
  phase: 'attack' | 'defend' | 'discard';
  isPlayerTurn: boolean;
  selectedCards: CardType[];
  onAttack: () => void;
  onTake: () => void;
  onPass: () => void;
  onDiscard?: () => void;
  isLoading?: boolean;
  error?: string | null;
  className?: string;
  style?: React.CSSProperties;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–∑—ã –∏–≥—Ä—ã
 */
interface PhaseConfig {
  title: string;
  description: string;
  primaryAction?: {
    label: string;
    handler: () => void;
    disabled: boolean;
    variant: string;
  };
  secondaryActions?: Array<{
    label: string;
    handler: () => void;
    disabled: boolean;
    variant: string;
  }>;
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const UI_TEXT = {
  PHASES: {
    ATTACK: '–§–∞–∑–∞ –∞—Ç–∞–∫–∏',
    DEFEND: '–§–∞–∑–∞ –∑–∞—â–∏—Ç—ã', 
    DISCARD: '–§–∞–∑–∞ —Å–±—Ä–æ—Å–∞'
  },
  DESCRIPTIONS: {
    ATTACK: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∞—Ç–∞–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"',
    DEFEND: '–ó–∞—â–∏—Ç–∏—Ç–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ –∏—Ö',
    DISCARD: '–°–±—Ä–æ—Å—å—Ç–µ –ª–∏—à–Ω–∏–µ –∫–∞—Ä—Ç—ã'
  },
  BUTTONS: {
    ATTACK: '–ê—Ç–∞–∫–æ–≤–∞—Ç—å',
    TAKE: '–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã',
    PASS: '–ü–∞—Å',
    DISCARD: '–°–±—Ä–æ—Å–∏—Ç—å'
  },
  MESSAGES: {
    WAITING_TURN: '–û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...',
    SELECT_CARDS: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∞—Ç–∞–∫–∏',
    NO_CARDS_SELECTED: '–ö–∞—Ä—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã',
    UNKNOWN_PHASE: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞ –∏–≥—Ä—ã'
  },
  EMOJIS: {
    ATTACK: 'üó°Ô∏è',
    DEFEND: 'üõ°Ô∏è',
    TAKE: 'üì•',
    PASS: '‚úÖ',
    DISCARD: 'üóëÔ∏è',
    WAITING: '‚è≥'
  }
} as const;

const BUTTON_VARIANTS = {
  PRIMARY: 'primary',
  SUCCESS: 'success',
  WARNING: 'warning',
  DANGER: 'danger',
  SECONDARY: 'secondary'
} as const;

const CSS_CLASSES = {
  CONTROLS: 'game-controls',
  CONTROLS_DISABLED: 'game-controls--disabled',
  PHASE_INFO: 'phase-info',
  ACTIONS: 'game-actions',
  WAITING: 'waiting-message'
} as const;

// ===== –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
 */
const getPhaseConfig = (
  phase: string,
  selectedCards: CardType[],
  onAttack: () => void,
  onTake: () => void,
  onPass: () => void,
  onDiscard?: () => void,
  isLoading = false
): PhaseConfig => {
  switch (phase) {
    case 'attack':
      return {
        title: UI_TEXT.PHASES.ATTACK,
        description: selectedCards.length > 0 
          ? `${UI_TEXT.DESCRIPTIONS.ATTACK} (${selectedCards.length} –∫–∞—Ä—Ç –≤—ã–±—Ä–∞–Ω–æ)`
          : UI_TEXT.DESCRIPTIONS.ATTACK,
        primaryAction: {
          label: `${UI_TEXT.EMOJIS.ATTACK} ${UI_TEXT.BUTTONS.ATTACK} (${selectedCards.length})`,
          handler: onAttack,
          disabled: selectedCards.length === 0 || isLoading,
          variant: BUTTON_VARIANTS.PRIMARY
        },
        secondaryActions: [
          {
            label: `${UI_TEXT.EMOJIS.PASS} ${UI_TEXT.BUTTONS.PASS}`,
            handler: onPass,
            disabled: isLoading,
            variant: BUTTON_VARIANTS.SECONDARY
          }
        ]
      };

    case 'defend':
      return {
        title: UI_TEXT.PHASES.DEFEND,
        description: UI_TEXT.DESCRIPTIONS.DEFEND,
        primaryAction: {
          label: `${UI_TEXT.EMOJIS.DEFEND} –ó–∞—â–∏—Ç–∏—Ç—å`,
          handler: () => {}, // –ó–∞—â–∏—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
          disabled: true,
          variant: BUTTON_VARIANTS.SUCCESS
        },
        secondaryActions: [
          {
            label: `${UI_TEXT.EMOJIS.TAKE} ${UI_TEXT.BUTTONS.TAKE}`,
            handler: onTake,
            disabled: isLoading,
            variant: BUTTON_VARIANTS.WARNING
          },
          {
            label: `${UI_TEXT.EMOJIS.PASS} ${UI_TEXT.BUTTONS.PASS}`,
            handler: onPass,
            disabled: isLoading,
            variant: BUTTON_VARIANTS.SUCCESS
          }
        ]
      };

    case 'discard':
      return {
        title: UI_TEXT.PHASES.DISCARD,
        description: UI_TEXT.DESCRIPTIONS.DISCARD,
        primaryAction: onDiscard ? {
          label: `${UI_TEXT.EMOJIS.DISCARD} ${UI_TEXT.BUTTONS.DISCARD}`,
          handler: onDiscard,
          disabled: isLoading,
          variant: BUTTON_VARIANTS.DANGER
        } : undefined
      };

    default:
      return {
        title: UI_TEXT.MESSAGES.UNKNOWN_PHASE,
        description: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞: ${phase}`
      };
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
 */
const getControlsClasses = (isPlayerTurn: boolean, className?: string): string => {
  let classes = CSS_CLASSES.CONTROLS;
  
  if (!isPlayerTurn) {
    classes += ` ${CSS_CLASSES.CONTROLS_DISABLED}`;
  }
  
  if (className) {
    classes += ` ${className}`;
  }
  
  return classes;
};

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢–´ =====

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∑–µ
 */
const PhaseInfo: React.FC<{
  config: PhaseConfig;
}> = React.memo(({ config }) => (
  <div className={CSS_CLASSES.PHASE_INFO}>
    <h6 className="mb-2">{config.title}</h6>
    <p className="text-muted small mb-0">{config.description}</p>
  </div>
));

PhaseInfo.displayName = 'PhaseInfo';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
 */
const ActionButton: React.FC<{
  label: string;
  handler: () => void;
  disabled: boolean;
  variant: string;
  isLoading?: boolean;
}> = React.memo(({ label, handler, disabled, variant, isLoading }) => (
  <Button
    variant={variant}
    onClick={handler}
    disabled={disabled}
    className="me-2 mb-2"
    aria-label={label.replace(/[üó°Ô∏èüõ°Ô∏èüì•‚úÖüóëÔ∏è‚è≥]/g, '').trim()}
  >
    {isLoading ? (
      <>
        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true" />
        –ó–∞–≥—Ä—É–∑–∫–∞...
      </>
    ) : (
      label
    )}
  </Button>
));

ActionButton.displayName = 'ActionButton';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
 */
const WaitingMessage: React.FC = React.memo(() => (
  <div className={CSS_CLASSES.WAITING}>
    <Alert variant="info" className="text-center mb-0">
      <div className="d-flex align-items-center justify-content-center">
        <span className="me-2" role="img" aria-label="–û–∂–∏–¥–∞–Ω–∏–µ">
          {UI_TEXT.EMOJIS.WAITING}
        </span>
        {UI_TEXT.MESSAGES.WAITING_TURN}
      </div>
    </Alert>
  </div>
));

WaitingMessage.displayName = 'WaitingMessage';

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
 */
export const GameControls: React.FC<GameControlsProps> = React.memo(({
  phase,
  isPlayerTurn,
  selectedCards,
  onAttack,
  onTake,
  onPass,
  onDiscard,
  isLoading = false,
  error,
  className,
  style
}) => {
  // ===== –í–ê–õ–ò–î–ê–¶–ò–Ø =====

  if (!onAttack || !onTake || !onPass) {
    console.warn('GameControls: Missing required callbacks');
    return null;
  }

  // ===== –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –í–´–ß–ò–°–õ–ï–ù–ò–Ø =====

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–∑—ã
   */
  const phaseConfig = useMemo(() => {
    return getPhaseConfig(
      phase,
      selectedCards,
      onAttack,
      onTake,
      onPass,
      onDiscard,
      isLoading
    );
  }, [phase, selectedCards, onAttack, onTake, onPass, onDiscard, isLoading]);

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CSS –∫–ª–∞—Å—Å—ã
   */
  const controlsClasses = useMemo(() => {
    return getControlsClasses(isPlayerTurn, className);
  }, [isPlayerTurn, className]);

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
   */
  const handlePrimaryAction = useCallback(() => {
    if (phaseConfig.primaryAction && !phaseConfig.primaryAction.disabled) {
      phaseConfig.primaryAction.handler();
    }
  }, [phaseConfig.primaryAction]);

  // ===== EARLY RETURN –î–õ–Ø –ß–£–ñ–û–ì–û –•–û–î–ê =====

  if (!isPlayerTurn) {
    return (
      <Card className={controlsClasses} style={style}>
        <Card.Body>
          <WaitingMessage />
        </Card.Body>
      </Card>
    );
  }

  // ===== –†–ï–ù–î–ï–† =====

  return (
    <Card 
      className={controlsClasses} 
      style={style}
      role="region"
      aria-label="–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π"
    >
      <Card.Body>
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∑–µ */}
        <PhaseInfo config={phaseConfig} />

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <Alert variant="danger" className="mt-3 mb-3">
            {error}
          </Alert>
        )}

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className={CSS_CLASSES.ACTIONS}>
          {/* –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ */}
          {phaseConfig.primaryAction && (
            <ActionButton
              label={phaseConfig.primaryAction.label}
              handler={phaseConfig.primaryAction.handler}
              disabled={phaseConfig.primaryAction.disabled}
              variant={phaseConfig.primaryAction.variant}
              isLoading={isLoading}
            />
          )}

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          {phaseConfig.secondaryActions?.map((action, index) => (
            <ActionButton
              key={`secondary-${index}`}
              label={action.label}
              handler={action.handler}
              disabled={action.disabled}
              variant={action.variant}
              isLoading={isLoading}
            />
          ))}
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ñ–∞–∑—ã –∞—Ç–∞–∫–∏ */}
        {phase === 'attack' && selectedCards.length === 0 && (
          <Alert variant="info" className="mt-3 mb-0">
            <small>{UI_TEXT.MESSAGES.SELECT_CARDS}</small>
          </Alert>
        )}
      </Card.Body>
    </Card>
  );
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ displayName –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
GameControls.displayName = 'GameControls';

// ===== –≠–ö–°–ü–û–†–¢ =====
export default GameControls;
export type { GameControlsProps, PhaseConfig };
export { 
  UI_TEXT, 
  BUTTON_VARIANTS, 
  CSS_CLASSES,
  getPhaseConfig,
  getControlsClasses
};
