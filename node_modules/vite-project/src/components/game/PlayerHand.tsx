// src/components/PlayerHand.tsx - –†–£–ö–ê –ò–ì–†–û–ö–ê

import React, { useMemo, useCallback } from 'react';
import { Card, Row, Col } from 'react-bootstrap';
import { Card as CardType } from '../../../packages/shared/src/types';
import GameCard from './GameCard';

// ===== –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

/**
 * Props –¥–ª—è PlayerHand
 */
export interface PlayerHandProps {
  cards: CardType[];
  selectedCards: CardType[];
  onCardSelect: (card: CardType) => void;
  trump: CardType | null;
  isPlayable?: boolean;
  className?: string;
  style?: React.CSSProperties;
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const UI_CONSTANTS = {
  HAND_TITLE: '–í–∞—à–∏ –∫–∞—Ä—Ç—ã',
  EMPTY_HAND_MESSAGE: '–ö–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
  GRID_BREAKPOINTS: {
    xs: 6,
    sm: 4,
    md: 3,
    lg: 2
  },
  CLASSES: {
    PLAYER_HAND: 'player-hand',
    HAND_TITLE: 'hand-title',
    HAND_GRID: 'hand-grid',
    EMPTY_HAND: 'empty-hand'
  }
} as const;

// ===== –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞
 */
const isCardSelected = (card: CardType, selectedCards: CardType[]): boolean => {
  return selectedCards.some(c => c.id === card.id);
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –∫–æ–∑—ã—Ä–Ω–æ–π
 */
const isCardTrump = (card: CardType, trump: CardType | null): boolean => {
  return Boolean(trump && card.suit === trump.suit);
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
 */
const validateCard = (card: any): card is CardType => {
  return card &&
    typeof card.id === 'string' &&
    typeof card.rank === 'string' &&
    typeof card.suit === 'string';
};

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢–´ =====

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—É—Å—Ç–æ–π —Ä—É–∫–∏
 */
const EmptyHand: React.FC = React.memo(() => (
  <div 
    className={UI_CONSTANTS.CLASSES.EMPTY_HAND}
    style={{
      textAlign: 'center',
      padding: '40px 20px',
      color: '#6c757d'
    }}
    role="status"
    aria-label="–ö–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"
  >
    <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üÉè</div>
    <p>{UI_CONSTANTS.EMPTY_HAND_MESSAGE}</p>
  </div>
));

EmptyHand.displayName = 'EmptyHand';

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞
 */
export const PlayerHand: React.FC<PlayerHandProps> = React.memo(({
  cards = [],
  selectedCards = [],
  onCardSelect,
  trump,
  isPlayable = true,
  className = '',
  style = {}
}) => {
  // ===== –í–ê–õ–ò–î–ê–¶–ò–Ø =====

  if (!onCardSelect) {
    console.warn('PlayerHand: onCardSelect callback is required');
    return null;
  }

  if (!Array.isArray(cards)) {
    console.error('PlayerHand: cards must be an array');
    return (
      <Card className={className} style={style}>
        <Card.Body>
          <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç</div>
        </Card.Body>
      </Card>
    );
  }

  // ===== –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –í–´–ß–ò–°–õ–ï–ù–ò–Ø =====

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Set –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
   */
  const selectedCardIds = useMemo(() => 
    new Set(selectedCards.map(c => c.id)), 
    [selectedCards]
  );

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç
   */
  const validCards = useMemo(() => {
    return cards.filter(validateCard);
  }, [cards]);

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
   */
  const isCardSelectedMemo = useCallback((card: CardType) => {
    return selectedCardIds.has(card.id);
  }, [selectedCardIds]);

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–∑—ã—Ä–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
   */
  const isCardTrumpMemo = useCallback((card: CardType) => {
    return isCardTrump(card, trump);
  }, [trump]);

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
   */
  const handleCardSelect = useCallback((card: CardType) => {
    if (isPlayable) {
      onCardSelect(card);
    }
  }, [onCardSelect, isPlayable]);

  // ===== EARLY RETURN –î–õ–Ø –ü–£–°–¢–û–ô –†–£–ö–ò =====

  if (validCards.length === 0) {
    return (
      <Card className={`${UI_CONSTANTS.CLASSES.PLAYER_HAND} ${className}`} style={style}>
        <Card.Body>
          <EmptyHand />
        </Card.Body>
      </Card>
    );
  }

  // ===== –†–ï–ù–î–ï–† =====

  return (
    <Card 
      className={`${UI_CONSTANTS.CLASSES.PLAYER_HAND} ${className}`} 
      style={style}
      role="region" 
      aria-label="–í–∞—à–∞ —Ä—É–∫–∞"
    >
      <Card.Body>
        <h4 
          id="player-hand-title"
          className={UI_CONSTANTS.CLASSES.HAND_TITLE}
        >
          {UI_CONSTANTS.HAND_TITLE} ({validCards.length})
        </h4>
        
        <Row 
          className={UI_CONSTANTS.CLASSES.HAND_GRID}
          role="grid" 
          aria-labelledby="player-hand-title"
          aria-live="polite"
        >
          {validCards.map((card) => (
            <Col 
              key={card.id}
              xs={UI_CONSTANTS.GRID_BREAKPOINTS.xs} 
              sm={UI_CONSTANTS.GRID_BREAKPOINTS.sm} 
              md={UI_CONSTANTS.GRID_BREAKPOINTS.md} 
              lg={UI_CONSTANTS.GRID_BREAKPOINTS.lg}
              className="mb-3"
              role="gridcell"
            >
              <GameCard
                card={card}
                isSelected={isCardSelectedMemo(card)}
                isPlayable={isPlayable}
                isTrump={isCardTrumpMemo(card)}
                onClick={() => handleCardSelect(card)}
                size="medium"
              />
            </Col>
          ))}
        </Row>
      </Card.Body>
    </Card>
  );
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ displayName –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
PlayerHand.displayName = 'PlayerHand';

// –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º comparator
export default React.memo(PlayerHand, (prevProps, nextProps) => {
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –∫–∞—Ä—Ç
  const cardsEqual = prevProps.cards.length === nextProps.cards.length &&
    prevProps.cards.every((card, index) => card.id === nextProps.cards[index]?.id);
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
  const selectedCardsEqual = prevProps.selectedCards.length === nextProps.selectedCards.length &&
    prevProps.selectedCards.every((card, index) => card.id === nextProps.selectedCards[index]?.id);
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–∑—ã—Ä—è
  const trumpEqual = prevProps.trump?.id === nextProps.trump?.id;
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö props
  const otherPropsEqual = prevProps.isPlayable === nextProps.isPlayable &&
    prevProps.onCardSelect === nextProps.onCardSelect &&
    prevProps.className === nextProps.className;
  
  return cardsEqual && selectedCardsEqual && trumpEqual && otherPropsEqual;
});

// ===== –≠–ö–°–ü–û–†–¢ =====
export type { PlayerHandProps };
export { 
  UI_CONSTANTS,
  isCardSelected,
  isCardTrump,
  validateCard
};
