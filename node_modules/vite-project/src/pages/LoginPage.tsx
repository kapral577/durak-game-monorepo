// src/pages/LoginPage.tsx - –°–¢–†–ê–ù–ò–¶–ê –í–•–û–î–ê –í –ò–ì–†–£

import React, { useState, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Card, Button, Spinner, Alert } from 'react-bootstrap';
import { TelegramAuth } from '../utils/TelegramAuth';

// ‚úÖ –ò–ú–ü–û–†–¢ –ï–î–ò–ù–´–• –¢–ò–ü–û–í –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
import { AuthSuccessResponse, AuthErrorResponse, AuthResponse } from '../types/AuthTypes';

// ===== –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

/**
 * Props –¥–ª—è LoginPage
 */
export interface LoginPageProps {
  // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã props –≤ –±—É–¥—É—â–µ–º
}

// ‚ùå –£–î–ê–õ–ï–ù–´ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–µ —Ç–∏–ø—ã

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const CONFIG = {
  CONNECTION_TIMEOUT: 10000,
  WEBSOCKET_URL: import.meta.env.VITE_WS_URL || 'wss://durak-game-monorepo.onrender.com:10000',
  API_BASE_URL: import.meta.env.VITE_API_URL || '/api',
  TEST_MODE_PREFIX: 'test-',
  STORAGE_KEYS: {
    GAME_TOKEN: 'gameToken',
    SESSION_ID: 'sessionId'
  }
} as const;

const ERROR_MESSAGES = {
  TELEGRAM_NOT_AVAILABLE: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram.',
  SERVER_AUTH_FAILED: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.',
  CONNECTION_TIMEOUT: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.',
  WEBSOCKET_FAILED: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É.',
  GENERIC: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.',
  INVALID_RESPONSE: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞',
  NETWORK_ERROR: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'
} as const;

const UI_TEXT = {
  PAGE_TITLE: '–í—Ö–æ–¥ –≤ –∏–≥—Ä—É',
  LOGIN_BUTTON: '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram',
  CONNECTING_TEXT: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
  FALLBACK_MESSAGE: '–î–ª—è –∏–≥—Ä—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram WebApp',
  RETRY_BUTTON: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'
} as const;

// ===== –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ WebSocket URL —Å —Ç–æ–∫–µ–Ω–æ–º
 */
const getWebSocketUrl = (token: string): string => {
  const baseUrl = CONFIG.WEBSOCKET_URL;
  
  if (!baseUrl) {
    throw new Error('WebSocket URL not configured');
  }
  
  try {
    const url = new URL(baseUrl);
    url.searchParams.set('token', token);
    return url.toString();
  } catch (error) {
    throw new Error('Invalid WebSocket URL configuration');
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ API URL
 */
const getApiUrl = (endpoint: string): string => {
  const baseUrl = CONFIG.API_BASE_URL;
  return `${baseUrl}${endpoint}`;
};

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –µ–¥–∏–Ω—ã—Ö —Ç–∏–ø–æ–≤
 */
const validateAuthResponse = (data: any): data is AuthSuccessResponse => {
  return data && 
    data.success === true &&
    typeof data.token === 'string' && 
    typeof data.sessionId === 'string' &&
    data.token.length > 0 &&
    data.sessionId.length > 0 &&
    data.user &&
    typeof data.user.id === 'string' &&
    typeof data.user.name === 'string' &&
    typeof data.user.telegramId === 'number';
};

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º endpoint
 */
const authenticateWithRetry = async (
  initData: string, 
  user: any, 
  retryCount = 0
): Promise<AuthSuccessResponse> => {
  const MAX_RETRIES = 3;
  
  try {
    console.log('üîê Sending auth request with initData length:', initData.length);
    
    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù endpoint –Ω–∞ –Ω–æ–≤—ã–π
    const response = await fetch(getApiUrl('/auth/telegram'), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData })
    });
    
    console.log('üì° Response status:', response.status);
    
    if (!response.ok) {
      throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
    }
    
    const authData: AuthResponse = await response.json();
    
    console.log('üìã Response data structure:', {
      hasSuccess: 'success' in authData,
      successValue: authData.success,
      hasToken: 'token' in authData,
      hasError: 'error' in authData
    });
    
    if (authData.success === false) {
      throw new Error(authData.error || ERROR_MESSAGES.SERVER_AUTH_FAILED);
    }
    
    if (!validateAuthResponse(authData)) {
      console.error('‚ùå Invalid response format:', authData);
      throw new Error(ERROR_MESSAGES.INVALID_RESPONSE);
    }
    
    return authData as AuthSuccessResponse;
  } catch (error) {
    console.error('üö´ Auth attempt failed:', error);
    if (retryCount < MAX_RETRIES) {
      console.log(`üîÑ Retry attempt ${retryCount + 1}/${MAX_RETRIES}`);
      await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
      return authenticateWithRetry(initData, user, retryCount + 1);
    }
    throw error;
  }
};

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
 */
export const LoginPage: React.FC<LoginPageProps> = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [isConnecting, setIsConnecting] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  
  // –•—É–∫–∏
  const navigate = useNavigate();

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP =====

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      tg.expand();
      tg.enableClosingConfirmation();
      tg.disableVerticalSwipes();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
      if (tg.colorScheme === 'dark') {
        document.body.classList.add('dark-theme');
      }
    }
  }, []);

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
   */
  const handleLogin = useCallback(async () => {
    setIsConnecting(true);
    setError(null);
    
    let gameSocket: WebSocket | null = null;
    let connectionTimeout: NodeJS.Timeout | null = null;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram WebApp
      if (!TelegramAuth.isTelegramWebAppAvailable() && process.env.NODE_ENV === 'production') {
        throw new Error(ERROR_MESSAGES.TELEGRAM_NOT_AVAILABLE);
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = TelegramAuth.getTelegramUser();
      if (!user) {
        throw new Error(ERROR_MESSAGES.SERVER_AUTH_FAILED);
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ initData –∏–∑ Telegram WebApp
      const initData = TelegramAuth.isTelegramWebAppAvailable() 
        ? window.Telegram?.WebApp?.initData || ''
        : '';

      console.log('üéØ Starting authentication process...');

      // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const { token, sessionId, user: playerData } = await authenticateWithRetry(initData, user);

      console.log('‚úÖ Authentication successful:', { sessionId, hasToken: !!token });

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
      localStorage.setItem(CONFIG.STORAGE_KEYS.GAME_TOKEN, token);
      localStorage.setItem(CONFIG.STORAGE_KEYS.SESSION_ID, sessionId);

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
      gameSocket = new WebSocket(getWebSocketUrl(token));
      
      connectionTimeout = setTimeout(() => {
        gameSocket?.close();
        throw new Error(ERROR_MESSAGES.CONNECTION_TIMEOUT);
      }, CONFIG.CONNECTION_TIMEOUT);

      gameSocket.onopen = () => {
        if (connectionTimeout) {
          clearTimeout(connectionTimeout);
        }
        console.log('üéÆ WebSocket connected successfully');
        // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        navigate('/');
      };

      gameSocket.onerror = () => {
        throw new Error(ERROR_MESSAGES.WEBSOCKET_FAILED);
      };

      gameSocket.onclose = (event) => {
        if (event.code !== 1000) { // –ù–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
          throw new Error(ERROR_MESSAGES.WEBSOCKET_FAILED);
        }
      };

    } catch (err) {
      // Cleanup –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (connectionTimeout) {
        clearTimeout(connectionTimeout);
      }
      if (gameSocket) {
        gameSocket.close();
      }
      
      const errorMessage = err instanceof Error ? err.message : ERROR_MESSAGES.GENERIC;
      console.error('‚ùå Login error:', err);
      setError(errorMessage);
    } finally {
      setIsConnecting(false);
    }
  }, [navigate]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
   */
  const handleRetry = useCallback(() => {
    setError(null);
    handleLogin();
  }, [handleLogin]);

  // ===== –†–ï–ù–î–ï–† =====

  return (
    <Container 
      className="d-flex justify-content-center align-items-center min-vh-100"
      role="main"
      aria-label="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É"
    >
      <Card style={{ width: '400px' }}>
        <Card.Body className="text-center">
          <h2 className="mb-4" id="login-title">
            {UI_TEXT.PAGE_TITLE}
          </h2>

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ */}
          {error && (
            <Alert 
              variant="danger" 
              className="mb-3"
              role="alert"
              aria-live="assertive"
            >
              {error}
            </Alert>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
          <Button 
            variant="primary" 
            size="lg" 
            onClick={handleLogin}
            disabled={isConnecting}
            className="w-100 mb-3"
            aria-describedby="login-title"
            aria-label={isConnecting ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É" : "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"}
          >
            {isConnecting ? (
              <>
                <Spinner 
                  size="sm" 
                  className="me-2"
                  role="status"
                  aria-hidden="true"
                />
                {UI_TEXT.CONNECTING_TEXT}
              </>
            ) : (
              UI_TEXT.LOGIN_BUTTON
            )}
          </Button>

          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ */}
          {error && !isConnecting && (
            <Button 
              variant="outline-secondary" 
              onClick={handleRetry}
              className="w-100"
              aria-label="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞"
            >
              {UI_TEXT.RETRY_BUTTON}
            </Button>
          )}

          {/* Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ-Telegram –æ–∫—Ä—É–∂–µ–Ω–∏—è */}
          {!TelegramAuth.isTelegramWebAppAvailable() && process.env.NODE_ENV === 'production' && (
            <Alert variant="warning" className="mt-3">
              {UI_TEXT.FALLBACK_MESSAGE}
            </Alert>
          )}

          {/* Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
          {process.env.NODE_ENV === 'development' && (
            <div className="mt-3 pt-3 border-top">
              <small className="text-muted">
                <strong>Debug Info:</strong>
                <br />
                Telegram Available: {TelegramAuth.isTelegramWebAppAvailable() ? 'Yes' : 'No'}
                <br />
                Environment: {process.env.NODE_ENV}
                <br />
                WebSocket URL: {CONFIG.WEBSOCKET_URL}
                <br />
                API URL: {CONFIG.API_BASE_URL}
              </small>
            </div>
          )}
        </Card.Body>
      </Card>
    </Container>
  );
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ displayName –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
LoginPage.displayName = 'LoginPage';

// ===== –≠–ö–°–ü–û–†–¢ =====
export default LoginPage;
export type { LoginPageProps };
export { CONFIG, ERROR_MESSAGES, UI_TEXT };
