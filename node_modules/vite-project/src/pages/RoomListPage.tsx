// src/pages/RoomListPage.tsx - –°–ü–ò–°–û–ö –ò–ì–†–û–í–´–• –ö–û–ú–ù–ê–¢

import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Form, Button, Alert, Badge, Spinner } from 'react-bootstrap';
import { useGame } from '../context/GameProvider';
import { Room } from '@shared/types';

// ===== –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

/**
 * Props –¥–ª—è RoomListPage
 */
export interface RoomListPageProps {
  // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã props –≤ –±—É–¥—É—â–µ–º
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const UI_TEXT = {
  PAGE_TITLE: '–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç',
  SEARCH_PLACEHOLDER: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–Ω–∞—Ç—ã...',
  STATISTICS_TOTAL: '–í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç:',
  STATISTICS_WAITING: '–û–∂–∏–¥–∞—é—Ç –∏–≥—Ä–æ–∫–æ–≤:',
  STATISTICS_PLAYING: '–í –∏–≥—Ä–µ:',
  JOIN_BUTTON: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
  CREATE_ROOM_BUTTON: '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
  BACK_BUTTON: '‚Üê –ù–∞–∑–∞–¥',
  NO_ROOMS: '–ö–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
  LOADING_TEXT: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç...',
  ERROR_LOADING: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç',
  ROOM_FULL: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
  ROOM_NOT_FOUND: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
  JOINING_TEXT: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...'
} as const;

const STATUS_BADGES = {
  waiting: { variant: 'success', text: '–û–∂–∏–¥–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤' },
  playing: { variant: 'warning', text: '–í –∏–≥—Ä–µ' },
  finished: { variant: 'secondary', text: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' }
} as const;

const GAME_MODE_TEXTS = {
  classic: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
  transferable: '–ü–µ—Ä–µ–≤–æ–¥–Ω–æ–π'
} as const;

const THROWING_MODE_TEXTS = {
  standard: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
  smart: '–£–º–Ω—ã–π'
} as const;

const CSS_CLASSES = {
  ROOM_LIST_PAGE: 'room-list-page',
  SEARCH_SECTION: 'search-section',
  STATS_SECTION: 'stats-section',
  ROOMS_SECTION: 'rooms-section',
  ROOM_CARD: 'room-card',
  ROOM_HEADER: 'room-header',
  ROOM_BODY: 'room-body',
  ROOM_FOOTER: 'room-footer',
  PLAYER_LIST: 'player-list',
  EMPTY_STATE: 'empty-state'
} as const;

// ===== –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
const validateRoom = (room: any): room is Room => {
  return room &&
    typeof room.id === 'string' &&
    typeof room.name === 'string' &&
    Array.isArray(room.players) &&
    typeof room.maxPlayers === 'number' &&
    room.status &&
    room.rules;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
const canJoinRoom = (room: Room): boolean => {
  return room.status === 'waiting' && room.players.length < room.maxPlayers;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ badge —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
 */
const getStatusBadge = (room: Room) => {
  const config = STATUS_BADGES[room.status as keyof typeof STATUS_BADGES] || STATUS_BADGES.finished;
  return config;
};

/**
 * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
 */
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢–´ =====

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
 */
const RoomCard: React.FC<{
  room: Room;
  isJoining: boolean;
  onJoin: (roomId: string) => void;
}> = React.memo(({ room, isJoining, onJoin }) => {
  const statusBadge = getStatusBadge(room);
  const canJoin = canJoinRoom(room);

  return (
    <Card 
      className={`${CSS_CLASSES.ROOM_CARD} mb-3`}
      role="listitem"
      aria-label={`–ö–æ–º–Ω–∞—Ç–∞ ${room.name}, ${room.players.length} –∏–∑ ${room.maxPlayers} –∏–≥—Ä–æ–∫–æ–≤`}
    >
      <Card.Header className={`${CSS_CLASSES.ROOM_HEADER} d-flex justify-content-between align-items-center`}>
        <h5 className="mb-0">{room.name}</h5>
        <Badge 
          bg={statusBadge.variant}
          aria-label={statusBadge.text}
        >
          {statusBadge.text}
        </Badge>
      </Card.Header>
      
      <Card.Body className={CSS_CLASSES.ROOM_BODY}>
        <Row>
          <Col md={6}>
            <small className="text-muted">–ò–≥—Ä–æ–∫–∏ ({room.players.length}/{room.maxPlayers}):</small>
            <div className={CSS_CLASSES.PLAYER_LIST}>
              {room.players.map((player, index) => (
                <span key={player.id || index} className="me-2">
                  {player.name}
                  {player.isReady && <span className="text-success ms-1">‚úì</span>}
                  {!player.isConnected && <span className="text-warning ms-1">‚ö†Ô∏è</span>}
                </span>
              ))}
            </div>
          </Col>
          
          <Col md={6}>
            <small className="text-muted">–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</small>
            <div>
              <div>{GAME_MODE_TEXTS[room.rules.gameMode as keyof typeof GAME_MODE_TEXTS]} –¥—É—Ä–∞–∫</div>
              <div>{THROWING_MODE_TEXTS[room.rules.throwingMode as keyof typeof THROWING_MODE_TEXTS]} –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ</div>
              <div>{room.rules.cardCount} –∫–∞—Ä—Ç</div>
            </div>
          </Col>
        </Row>
      </Card.Body>
      
      <Card.Footer className={`${CSS_CLASSES.ROOM_FOOTER} d-flex justify-content-between align-items-center`}>
        <small className="text-muted">
          –°–æ–∑–¥–∞–Ω–∞: {new Date(room.createdAt).toLocaleString()}
        </small>
        
        <Button
          variant={canJoin ? "primary" : "secondary"}
          disabled={!canJoin || isJoining}
          onClick={() => onJoin(room.id)}
          aria-label={`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`}
        >
          {isJoining ? (
            <>
              <Spinner size="sm" className="me-2" />
              {UI_TEXT.JOINING_TEXT}
            </>
          ) : (
            UI_TEXT.JOIN_BUTTON
          )}
        </Button>
      </Card.Footer>
    </Card>
  );
});

RoomCard.displayName = 'RoomCard';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç
 */
const RoomStats: React.FC<{
  total: number;
  waiting: number;
  playing: number;
}> = React.memo(({ total, waiting, playing }) => (
  <Alert variant="info" className={`${CSS_CLASSES.STATS_SECTION} mb-3`}>
    {UI_TEXT.STATISTICS_TOTAL} {total} | 
    {UI_TEXT.STATISTICS_WAITING} {waiting} | 
    {UI_TEXT.STATISTICS_PLAYING} {playing}
  </Alert>
));

RoomStats.displayName = 'RoomStats';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
const EmptyState: React.FC = React.memo(() => (
  <div className={`${CSS_CLASSES.EMPTY_STATE} text-center py-5`}>
    <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üè™</div>
    <h4>{UI_TEXT.NO_ROOMS}</h4>
    <p className="text-muted">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
  </div>
));

EmptyState.displayName = 'EmptyState';

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
 */
export const RoomListPage: React.FC<RoomListPageProps> = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [isJoining, setIsJoining] = useState<string | null>(null);

  // –•—É–∫–∏
  const navigate = useNavigate();
  const { 
    rooms, 
    joinRoom, 
    refreshRooms,
    isConnected, 
    error,
    clearError 
  } = useGame();

  // Debounced –ø–æ–∏—Å–∫
  const debouncedSearchTerm = useDebounce(searchTerm, 300);

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
   */
  const handleBack = useCallback(() => {
    navigate('/');
  }, [navigate]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
   */
  const handleCreateRoom = useCallback(() => {
    navigate('/settings');
  }, [navigate]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
   */
  const handleJoinRoom = useCallback(async (roomId: string) => {
    if (!roomId || isJoining) return;

    if (!isConnected) {
      console.warn('Cannot join room: not connected to server');
      return;
    }

    setIsJoining(roomId);
    clearError();

    try {
      await joinRoom(roomId);
      navigate(`/room/${roomId}`);
    } catch (err) {
      console.error('Error joining room:', err);
      // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    } finally {
      setIsJoining(null);
    }
  }, [joinRoom, navigate, isJoining, isConnected, clearError]);

  // ===== –ú–ï–ú–û–ò–ó–ê–¶–ò–Ø =====

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
   */
  const filteredRooms = useMemo(() => {
    if (!rooms || !Array.isArray(rooms)) return [];

    return rooms
      .filter(validateRoom)
      .filter(room => 
        room.name.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
      );
  }, [rooms, debouncedSearchTerm]);

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–Ω–∞—Ç
   */
  const roomStats = useMemo(() => {
    const total = filteredRooms.length;
    const waiting = filteredRooms.filter(r => r.status === 'waiting').length;
    const playing = filteredRooms.filter(r => r.status === 'playing').length;

    return { total, waiting, playing };
  }, [filteredRooms]);

  // ===== –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï =====

  useEffect(() => {
    if (isConnected) {
      refreshRooms();
    }
  }, [isConnected, refreshRooms]);

  // ===== KEYBOARD SHORTCUTS =====

  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (event.ctrlKey || event.metaKey) {
        switch (event.key) {
          case 'n':
            event.preventDefault();
            handleCreateRoom();
            break;
          case 'f':
            event.preventDefault();
            document.querySelector('input[type="text"]')?.focus();
            break;
          case 'Escape':
            event.preventDefault();
            handleBack();
            break;
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [handleCreateRoom, handleBack]);

  // ===== –†–ï–ù–î–ï–† =====

  return (
    <Container 
      className={CSS_CLASSES.ROOM_LIST_PAGE}
      role="main"
      aria-label="–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <Row className="mb-4">
        <Col>
          <div className="d-flex justify-content-between align-items-center">
            <Button
              variant="outline-secondary"
              onClick={handleBack}
              aria-label="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"
            >
              {UI_TEXT.BACK_BUTTON}
            </Button>
            
            <h2 className="mb-0">{UI_TEXT.PAGE_TITLE}</h2>
            
            <Button
              variant="success"
              onClick={handleCreateRoom}
              aria-label="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"
            >
              {UI_TEXT.CREATE_ROOM_BUTTON}
            </Button>
          </div>
        </Col>
      </Row>

      {/* –ü–æ–∏—Å–∫ */}
      <Row className="mb-3">
        <Col>
          <Form.Control
            type="text"
            placeholder={UI_TEXT.SEARCH_PLACEHOLDER}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className={CSS_CLASSES.SEARCH_SECTION}
            aria-label="–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
          />
        </Col>
      </Row>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <RoomStats 
        total={roomStats.total}
        waiting={roomStats.waiting}
        playing={roomStats.playing}
      />

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <Alert variant="danger" role="alert" aria-live="assertive">
          {error}
        </Alert>
      )}

      {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç */}
      <div className={CSS_CLASSES.ROOMS_SECTION} role="list">
        {filteredRooms.length === 0 ? (
          <EmptyState />
        ) : (
          filteredRooms.map(room => (
            <RoomCard
              key={room.id}
              room={room}
              isJoining={isJoining === room.id}
              onJoin={handleJoinRoom}
            />
          ))
        )}
      </div>
    </Container>
  );
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ displayName –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
RoomListPage.displayName = 'RoomListPage';

// ===== –≠–ö–°–ü–û–†–¢ =====
export default RoomListPage;
export type { RoomListPageProps };
export { UI_TEXT, STATUS_BADGES, CSS_CLASSES, validateRoom, canJoinRoom, getStatusBadge };
