// src/components/GameInfo.tsx - –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ì–†–ï

import React, { useMemo, useCallback } from 'react';
import { Card, Row, Col, Badge, Alert } from 'react-bootstrap';
import { GameState, Player } from '../../../packages/shared/src/types';

// ===== –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

/**
 * Props –¥–ª—è GameInfo
 */
export interface GameInfoProps {
  gameState: GameState;
  currentPlayer: Player | null;
  isPlayerTurn: boolean;
  className?: string;
  style?: React.CSSProperties;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–∑—ã –∏–≥—Ä—ã
 */
interface PhaseConfig {
  text: string;
  variant: string;
  emoji: string;
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const UI_TEXT = {
  PHASE_LABEL: '–§–∞–∑–∞',
  TURN_LABEL: '–•–æ–¥–∏—Ç',
  DECK_LABEL: '–ö–æ–ª–æ–¥–∞',
  PLAYERS_LABEL: '–ò–≥—Ä–æ–∫–∏',
  YOUR_TURN: '–í–∞—à —Ö–æ–¥',
  WINNER_PREFIX: 'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:',
  UNKNOWN: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
  DISCONNECTED_INDICATOR: '‚ö†Ô∏è',
  CARDS_COUNT: '–∫–∞—Ä—Ç'
} as const;

const PHASE_CONFIG: Record<string, PhaseConfig> = {
  attack: { 
    text: '–ê—Ç–∞–∫–∞', 
    variant: 'danger',
    emoji: 'üó°Ô∏è'
  },
  defend: { 
    text: '–ó–∞—â–∏—Ç–∞', 
    variant: 'warning',
    emoji: 'üõ°Ô∏è'
  },
  discard: { 
    text: '–°–±—Ä–æ—Å', 
    variant: 'info',
    emoji: 'üóëÔ∏è'
  },
  finished: { 
    text: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', 
    variant: 'success',
    emoji: 'üèÅ'
  }
} as const;

const CSS_CLASSES = {
  GAME_INFO: 'game-info',
  PHASE_INFO: 'phase-info',
  TURN_INFO: 'turn-info',
  DECK_INFO: 'deck-info',
  PLAYERS_INFO: 'players-info',
  PLAYER_ITEM: 'player-item',
  WINNER_ALERT: 'winner-alert'
} as const;

// ===== –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∞–∑—ã
 */
const getPhaseConfig = (phase: string): PhaseConfig => {
  return PHASE_CONFIG[phase] || { 
    text: UI_TEXT.UNKNOWN, 
    variant: 'secondary',
    emoji: '‚ùì'
  };
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
 */
const getCurrentPlayerName = (gameState: GameState): string => {
  if (!gameState?.currentPlayerId || !gameState?.players) {
    return UI_TEXT.UNKNOWN;
  }
  
  const currentGamePlayer = gameState.players.find(
    p => p?.id === gameState.currentPlayerId
  );
  return currentGamePlayer?.name || UI_TEXT.UNKNOWN;
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
const validateGameState = (gameState: any): gameState is GameState => {
  return gameState &&
    typeof gameState.phase === 'string' &&
    Array.isArray(gameState.players) &&
    Array.isArray(gameState.deck);
};

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢–´ =====

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∑–µ
 */
const PhaseInfo: React.FC<{
  phase: string;
}> = React.memo(({ phase }) => {
  const config = useMemo(() => getPhaseConfig(phase), [phase]);
  
  return (
    <Col className={CSS_CLASSES.PHASE_INFO}>
      <Badge 
        variant={config.variant}
        role="status"
        aria-label={`–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –∏–≥—Ä—ã: ${config.text}`}
        style={{ fontSize: '0.9rem', padding: '0.5rem' }}
      >
        <span role="img" aria-hidden="true" className="me-1">
          {config.emoji}
        </span>
        {config.text}
      </Badge>
      <div className="text-muted small mt-1">{UI_TEXT.PHASE_LABEL}</div>
    </Col>
  );
});

PhaseInfo.displayName = 'PhaseInfo';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ–¥–µ
 */
const TurnInfo: React.FC<{
  currentPlayerName: string;
  isPlayerTurn: boolean;
}> = React.memo(({ currentPlayerName, isPlayerTurn }) => (
  <Col className={CSS_CLASSES.TURN_INFO}>
    <div className="fw-bold">
      {isPlayerTurn ? (
        <span className="text-success">
          <span role="img" aria-label="–í–∞—à —Ö–æ–¥" className="me-1">‚ú®</span>
          {UI_TEXT.YOUR_TURN}
        </span>
      ) : (
        <span>
          <span role="img" aria-label="–•–æ–¥ –∏–≥—Ä–æ–∫–∞" className="me-1">üë§</span>
          {currentPlayerName}
        </span>
      )}
    </div>
    <div className="text-muted small mt-1">{UI_TEXT.TURN_LABEL}</div>
  </Col>
));

TurnInfo.displayName = 'TurnInfo';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–¥–µ
 */
const DeckInfo: React.FC<{
  deckCount: number;
}> = React.memo(({ deckCount }) => (
  <Col className={CSS_CLASSES.DECK_INFO}>
    <div className="fw-bold">
      <span role="img" aria-label="–ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç" className="me-1">üÉè</span>
      {deckCount} {UI_TEXT.CARDS_COUNT}
    </div>
    <div className="text-muted small mt-1">{UI_TEXT.DECK_LABEL}</div>
  </Col>
));

DeckInfo.displayName = 'DeckInfo';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
 */
const PlayersList: React.FC<{
  players: Player[];
}> = React.memo(({ players }) => (
  <div className={CSS_CLASSES.PLAYERS_INFO}>
    <h6 className="mb-2">{UI_TEXT.PLAYERS_LABEL}</h6>
    <Row>
      {players.map((player) => (
        <Col 
          key={player.id} 
          xs={6} 
          md={3}
          className={CSS_CLASSES.PLAYER_ITEM}
        >
          <div className="d-flex align-items-center">
            <span className="me-2">
              {player.name}
              {!player.isConnected && (
                <span 
                  role="img" 
                  aria-label="–û—Ç–∫–ª—é—á–µ–Ω"
                  className="ms-1 text-warning"
                >
                  {UI_TEXT.DISCONNECTED_INDICATOR}
                </span>
              )}
            </span>
            <Badge 
              variant="light"
              aria-label={`${player.hand?.length || 0} –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ`}
            >
              {player.hand?.length || 0}
            </Badge>
          </div>
        </Col>
      ))}
    </Row>
  </div>
));

PlayersList.displayName = 'PlayersList';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
 */
const WinnerInfo: React.FC<{
  winner: Player;
}> = React.memo(({ winner }) => (
  <Alert 
    variant="success" 
    className={CSS_CLASSES.WINNER_ALERT}
    role="alert"
    aria-live="polite"
  >
    <div className="text-center">
      <h5 className="mb-2">
        {UI_TEXT.WINNER_PREFIX} {winner.name}
      </h5>
      <div>
        <span role="img" aria-label="–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è" style={{ fontSize: '2rem' }}>
          üéâ
        </span>
      </div>
    </div>
  </Alert>
));

WinnerInfo.displayName = 'WinnerInfo';

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É, —Ö–æ–¥, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–æ–¥—ã –∏ –∏–≥—Ä–æ–∫–æ–≤
 */
export const GameInfo: React.FC<GameInfoProps> = React.memo(({
  gameState,
  currentPlayer,
  isPlayerTurn,
  className = '',
  style = {}
}) => {
  // ===== –í–ê–õ–ò–î–ê–¶–ò–Ø =====

  if (!validateGameState(gameState)) {
    console.warn('GameInfo: Invalid gameState provided');
    return (
      <Card className={className} style={style}>
        <Card.Body>
          <Alert variant="warning">
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
          </Alert>
        </Card.Body>
      </Card>
    );
  }

  // ===== –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –í–´–ß–ò–°–õ–ï–ù–ò–Ø =====

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
   */
  const currentPlayerName = useMemo(() => {
    return getCurrentPlayerName(gameState);
  }, [gameState]);

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ
   */
  const deckCount = useMemo(() => {
    return gameState.deck?.length || 0;
  }, [gameState.deck]);

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
   */
  const validPlayers = useMemo(() => {
    return gameState.players?.filter(player => player && player.id) || [];
  }, [gameState.players]);

  // ===== –†–ï–ù–î–ï–† =====

  return (
    <Card 
      className={`${CSS_CLASSES.GAME_INFO} ${className}`} 
      style={style}
      role="region"
      aria-label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ"
    >
      <Card.Body>
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ */}
        {gameState.winner && (
          <WinnerInfo winner={gameState.winner} />
        )}

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Row className="mb-3">
          <PhaseInfo phase={gameState.phase} />
          <TurnInfo 
            currentPlayerName={currentPlayerName}
            isPlayerTurn={isPlayerTurn}
          />
          <DeckInfo deckCount={deckCount} />
        </Row>

        {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
        {validPlayers.length > 0 && (
          <PlayersList players={validPlayers} />
        )}
      </Card.Body>
    </Card>
  );
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ displayName –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
GameInfo.displayName = 'GameInfo';

// ===== –≠–ö–°–ü–û–†–¢ =====
export default GameInfo;
export type { GameInfoProps, PhaseConfig };
export { 
  UI_TEXT, 
  PHASE_CONFIG, 
  CSS_CLASSES,
  getPhaseConfig,
  getCurrentPlayerName,
  validateGameState
};
