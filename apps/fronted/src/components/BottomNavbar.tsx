import React, { useCallback, useMemo } from 'react';
import { Navbar, Nav, Badge } from 'react-bootstrap';
import { Link, useLocation } from 'react-router-dom';
import { useGame } from '../context/GameProvider';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç–º–æ–¥–∑–∏ –∏ UI
const EMOJI = {
  HOME_ACTIVE: 'üè†',
  HOME_INACTIVE: 'üè°',
  ROOMS_ACTIVE: 'üéØ', 
  ROOMS_INACTIVE: 'üé≤',
  GAME_ACTIVE: 'üÉè',
  WAITING: '‚è≥',
  FRIENDS_ACTIVE: 'üë•',
  FRIENDS_INACTIVE: 'üë§',
  SETTINGS_ACTIVE: '‚öôÔ∏è',
  CREATE: '‚ûï',
  ACTIVE_GAME: 'üî¥',
  NOTIFICATION: 'üîî',
  DISCONNECTED: '‚ö†Ô∏è'
} as const;

const BottomNavbar: React.FC = () => {
  const location = useLocation();
  const {
    isConnected,
    currentRoom,
    gameState,
    rooms,
    telegramUser
  } = useGame();

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const isActive = useCallback((path: string): boolean => {
    if (path === '/' && location.pathname === '/') return true;
    if (path !== '/' && location.pathname.startsWith(path)) return true;
    return false;
  }, [location.pathname]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
  const availableRoomsCount = useMemo(() => {
    if (!rooms || !Array.isArray(rooms)) return 0;
    return rooms.filter(room => 
      room?.status === 'waiting' && 
      room?.players?.length < (room?.maxPlayers || 0)
    ).length;
  }, [rooms]);

  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const hasNotifications = false;

  return (
    <Navbar 
      fixed="bottom" 
      bg="dark" 
      variant="dark" 
      className="justify-content-around px-0"
    >
      {/* –ì–ª–∞–≤–Ω–∞—è */}
      <Nav.Link 
        as={Link} 
        to="/" 
        className={`text-center ${isActive('/') ? 'text-primary' : 'text-light'}`}
      >
        <div>
          {isActive('/') ? EMOJI.HOME_ACTIVE : EMOJI.HOME_INACTIVE}
        </div>
        <small>–ì–ª–∞–≤–Ω–∞—è</small>
      </Nav.Link>

      {/* –ö–æ–º–Ω–∞—Ç—ã */}
      <Nav.Link 
        as={Link} 
        to="/rooms" 
        className={`text-center position-relative ${isActive('/rooms') ? 'text-primary' : 'text-light'}`}
      >
        <div>
          {isActive('/rooms') ? EMOJI.ROOMS_ACTIVE : EMOJI.ROOMS_INACTIVE}
        </div>
        <small>–ö–æ–º–Ω–∞—Ç—ã</small>
        
        {/* –ë–µ–π–¥–∂ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç */}
        {availableRoomsCount > 0 && (
          <Badge 
            bg="success" 
            pill 
            className="position-absolute top-0 start-100 translate-middle"
          >
            {availableRoomsCount}
          </Badge>
        )}
      </Nav.Link>

      {/* –¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞ (–µ—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –∏–≥—Ä–µ) */}
      {(currentRoom || gameState) && (
        <Nav.Link 
          as={Link} 
          to={gameState ? "/game" : `/room/${currentRoom?.id}`}
          className={`text-center position-relative ${
            (gameState && isActive('/game')) || 
            (currentRoom && isActive('/room')) 
              ? 'text-primary' 
              : 'text-light'
          }`}
        >
          <div>
            {gameState ? EMOJI.GAME_ACTIVE : EMOJI.WAITING}
          </div>
          <small>{gameState ? '–ò–≥—Ä–∞' : '–ö–æ–º–Ω–∞—Ç–∞'}</small>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã */}
          {gameState && (
            <Badge 
              bg="danger" 
              pill 
              className="position-absolute top-0 start-100 translate-middle p-1"
            >
              {EMOJI.ACTIVE_GAME}
            </Badge>
          )}
        </Nav.Link>
      )}

      {/* –î—Ä—É–∑—å—è */}
      <Nav.Link 
        as={Link} 
        to="/friends" 
        className={`text-center position-relative ${isActive('/friends') ? 'text-primary' : 'text-light'}`}
      >
        <div>
          {isActive('/friends') ? EMOJI.FRIENDS_ACTIVE : EMOJI.FRIENDS_INACTIVE}
        </div>
        <small>–î—Ä—É–∑—å—è</small>
        
        {/* –ë–µ–π–¥–∂ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        {hasNotifications && (
          <Badge 
            bg="warning" 
            pill 
            className="position-absolute top-0 start-100 translate-middle"
          >
            {EMOJI.NOTIFICATION}
          </Badge>
        )}
      </Nav.Link>

      {/* –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É */}
      <Nav.Link 
        as={Link} 
        to="/settings" 
        className={`text-center ${isActive('/settings') ? 'text-primary' : 'text-light'}`}
      >
        <div>
          {isActive('/settings') ? EMOJI.SETTINGS_ACTIVE : EMOJI.CREATE}
        </div>
        <small>–°–æ–∑–¥–∞—Ç—å</small>
      </Nav.Link>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
      {!isConnected && (
        <div className="position-absolute top-0 end-0 m-2">
          <Badge bg="danger">
            {EMOJI.DISCONNECTED}
          </Badge>
        </div>
      )}
    </Navbar>
  );
};

export default BottomNavbar;
