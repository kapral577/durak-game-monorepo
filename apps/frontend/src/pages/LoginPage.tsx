// src/pages/LoginPage.tsx - –°–¢–†–ê–ù–ò–¶–ê –í–•–û–î–ê –í –ò–ì–†–£

import React, { useState, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Spinner, Alert } from 'react-bootstrap';
import { useAuth } from '../hooks/useAuth';
import { TelegramAuth } from '../utils/TelegramAuth';

// ===== –¢–ò–ü–´ =====

interface AuthSuccessResponse {
  success: true;
  token: string;
  sessionId: string;
}

interface AuthErrorResponse {
  success: false;
  message: string;
  error?: string;
}

type AuthResponse = AuthSuccessResponse | AuthErrorResponse;

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const AUTH_CONFIG = {
  MAX_RETRIES: 3,
  RETRY_DELAY_BASE: 1000,
  REQUEST_TIMEOUT: 10000
} as const;

const ERROR_MESSAGES = {
  NO_TELEGRAM_DATA: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram',
  AUTH_FAILED: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
  NETWORK_ERROR: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
  SERVER_ERROR: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
  TIMEOUT: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'
} as const;

// ===== –£–¢–ò–õ–ò–¢–´ =====

const sleep = (ms: number): Promise<void> => 
  new Promise(resolve => setTimeout(resolve, ms));

const validateAuthResponse = (data: any): data is AuthSuccessResponse => {
  return data && 
    data.success === true &&
    typeof data.token === 'string' && 
    data.token.length > 0;
};

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====

export const LoginPage: React.FC = () => {
  // ===== –•–£–ö–ò =====
  const navigate = useNavigate();
  const auth = useAuth();

  // ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState({
    hasTelegramData: false,
    initDataLength: 0,
    userInfo: null as any
  });

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.ready();
      window.Telegram.WebApp.expand();
      window.Telegram.WebApp.setHeaderColor('#2c3e50');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
      window.Telegram.WebApp.enableClosingConfirmation();
      window.Telegram.WebApp.disableVerticalSwipes();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è debug
    const telegramUser = TelegramAuth.getTelegramUser();
    const initData = TelegramAuth.isTelegramWebAppAvailable() 
      ? window.Telegram?.WebApp?.initData || ''
      : '';

    setDebugInfo({
      hasTelegramData: !!telegramUser,
      initDataLength: initData.length,
      userInfo: telegramUser
    });
  }, []);

  // ===== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –° –ü–û–í–¢–û–†–ê–ú–ò =====

  const authenticateWithRetry = useCallback(async (
    initData: string,
    attempt = 1
  ): Promise<AuthResponse> => {
    try {
      console.log(`üîê Authentication attempt ${attempt}/${AUTH_CONFIG.MAX_RETRIES}`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), AUTH_CONFIG.REQUEST_TIMEOUT);

      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:3001';
      const response = await fetch(`${apiUrl}/auth/telegram`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ initData }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      console.log('üì° Response status:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('üìã Response data structure:', {
        hasSuccess: !!data.success,
        successValue: data.success,
        hasToken: !!data.token,
        hasError: !!data.error
      });

      if (!validateAuthResponse(data)) {
        throw new Error(data.message || ERROR_MESSAGES.AUTH_FAILED);
      }

      return data;

    } catch (err) {
      if (err.name === 'AbortError') {
        throw new Error(ERROR_MESSAGES.TIMEOUT);
      }

      if (attempt < AUTH_CONFIG.MAX_RETRIES) {
        console.log(`‚è≥ Retry ${attempt + 1} after ${AUTH_CONFIG.RETRY_DELAY_BASE * attempt}ms...`);
        await sleep(AUTH_CONFIG.RETRY_DELAY_BASE * attempt);
        return authenticateWithRetry(initData, attempt + 1);
      }

      throw err instanceof Error ? err : new Error(ERROR_MESSAGES.NETWORK_ERROR);
    }
  }, []);

  // ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–•–û–î–ê =====

  const handleLogin = useCallback(async (): Promise<void> => {
    setIsLoading(true);
    setError(null);

    try {
      console.log('üéØ Starting authentication process...');

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram
      const user = TelegramAuth.getTelegramUser();
      if (!user) {
        throw new Error(ERROR_MESSAGES.NO_TELEGRAM_DATA);
      }

      const initData = TelegramAuth.isTelegramWebAppAvailable() 
        ? window.Telegram?.WebApp?.initData || ''
        : '';

      if (!initData) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram');
      }

      console.log('üîê Sending auth request with initData length:', initData.length);

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const authData = await authenticateWithRetry(initData);

      console.log('‚úÖ Authentication successful:', { 
        sessionId: authData.sessionId, 
        hasToken: !!authData.token 
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AuthProvider —Å–æ—Å—Ç–æ—è–Ω–∏—è
      console.log('üîÑ Updating authentication state...');
      await auth.authenticate(authData.token);

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
      console.log('‚û°Ô∏è Navigating to main menu...');
      navigate('/');

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : ERROR_MESSAGES.AUTH_FAILED;
      console.error('‚ùå Authentication error:', err);
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, [auth, authenticateWithRetry, navigate]);

  // ===== –†–ï–ù–î–ï–† =====

  return (
    <Container 
      fluid 
      className="min-vh-100 d-flex align-items-center justify-content-center bg-gradient"
      role="main"
      aria-label="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É"
    >
      <Row className="w-100 justify-content-center">
        <Col xs={12} sm={10} md={8} lg={6} xl={5} xxl={4}>
          <Card className="shadow-lg border-0 rounded-4">
            <Card.Header className="text-center py-4 bg-primary text-white rounded-top-4">
              <h2 className="mb-0 fw-bold">
                üÉè –î—É—Ä–∞–∫ –û–Ω–ª–∞–π–Ω
              </h2>
              <small className="opacity-75">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!</small>
            </Card.Header>
            
            <Card.Body className="p-4">
              {error && (
                <Alert 
                  variant="danger" 
                  className="mb-4"
                  role="alert"
                  aria-live="assertive"
                >
                  <Alert.Heading className="h6 mb-2">
                    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞
                  </Alert.Heading>
                  <p className="mb-2">{error}</p>
                  <Button 
                    variant="outline-danger" 
                    size="sm" 
                    onClick={() => setError(null)}
                    aria-label="–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </Button>
                </Alert>
              )}

              <div className="text-center">
                <div className="mb-4">
                  <div className="display-1 mb-3">üéÆ</div>
                  <h4 className="mb-3">–ì–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ?</h4>
                  <p className="text-muted mb-4">
                    –î–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
                  </p>
                </div>

                <div className="d-grid gap-2">
                  <Button
                    variant="primary"
                    size="lg"
                    onClick={handleLogin}
                    disabled={isLoading}
                    className="py-3 fw-medium rounded-3"
                    aria-describedby="login-button-help"
                  >
                    {isLoading ? (
                      <>
                        <Spinner
                          animation="border"
                          size="sm"
                          className="me-2"
                          role="status"
                          aria-hidden="true"
                        />
                        –í—Ö–æ–¥ –≤ –∏–≥—Ä—É...
                      </>
                    ) : (
                      <>
                        üöÄ –í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É
                      </>
                    )}
                  </Button>
                  
                  <small id="login-button-help" className="text-muted">
                    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
                  </small>
                </div>
              </div>

              {!TelegramAuth.isTelegramWebAppAvailable() && (
                <Alert variant="warning" className="mt-4 mb-0">
                  <Alert.Heading className="h6 mb-2">
                    ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  </Alert.Heading>
                  <p className="mb-0">
                    –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
                  </p>
                </Alert>
              )}

              {/* Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
              {import.meta.env.DEV && (
                <div className="mt-4 pt-3 border-top">
                  <details>
                    <summary className="text-muted small cursor-pointer">
                      Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    </summary>
                    <div className="mt-2 p-2 bg-light rounded small font-monospace">
                      <div>Telegram –¥–∞–Ω–Ω—ã–µ: {debugInfo.hasTelegramData ? '‚úÖ' : '‚ùå'}</div>
                      <div>InitData –¥–ª–∏–Ω–∞: {debugInfo.initDataLength}</div>
                      <div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {debugInfo.userInfo?.first_name || '–ù–µ –Ω–∞–π–¥–µ–Ω'}</div>
                      <div>Auth —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {auth.isAuthenticated ? '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</div>
                    </div>
                  </details>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ displayName –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
LoginPage.displayName = 'LoginPage';

// ===== –≠–ö–°–ü–û–†–¢ =====
export default LoginPage;