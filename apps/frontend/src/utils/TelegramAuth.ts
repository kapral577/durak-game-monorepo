// src/utils/TelegramAuth.ts - –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° TELEGRAM WEBAPP

import { Player, TelegramUser, TelegramInitData } from '@shared/types';

// ===== –¢–ò–ü–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP API =====

declare global {
  interface Window {
    Telegram?: {
      WebApp: TelegramWebApp;
    };
  }
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 */
interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  photo_url?: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram WebApp
 */
interface TelegramWebApp {
  initData: string;
  initDataUnsafe: {
    user?: TelegramUser;
    auth_date: number;
    hash: string;
    query_id?: string;
  };
  ready: () => void;
  expand: () => void;
  close: () => void;
  enableClosingConfirmation: () => void;
  disableVerticalSwipes: () => void;
  colorScheme: 'light' | 'dark';
  isVersionAtLeast: (version: string) => boolean;
  openTelegramLink: (url: string) => void;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
interface AuthValidationResult {
  isValid: boolean;
  user?: TelegramUser;
  error?: string;
}

/**
 * –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
interface ServerValidationResponse {
  valid: boolean;
  user?: Player;
  error?: string;
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const AUTH_CONSTANTS = {
  MAX_AUTH_AGE_HOURS: 24,
  CACHE_DURATION_MS: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  MAX_RETRIES: 3,
  RETRY_DELAY_BASE: 1000,
  MOCK_USER_ID_PREFIX: 'test-'
} as const;

const API_ENDPOINTS = {
  VALIDATE_TELEGRAM: '/auth/validate-telegram',
  LOGIN: '/auth/login'
} as const;

const ERROR_MESSAGES = {
  NO_TELEGRAM_WEBAPP: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram',
  NO_USER_DATA: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram',
  AUTH_DATE_EXPIRED: '–î–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏',
  INVALID_HASH: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö',
  SERVER_VALIDATION_FAILED: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
  NETWORK_ERROR: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
  MISSING_CONFIG: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API',
  INVALID_RESPONSE: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞'
} as const;

// ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° =====

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */
export class TelegramAuth {
  // –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  private static validationCache = new Map<string, { 
    result: boolean; 
    timestamp: number; 
    user?: TelegramUser 
  }>();

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram WebApp
   */
  static isTelegramWebAppAvailable(): boolean {
    return typeof window !== 'undefined' && 
           window.Telegram?.WebApp !== undefined;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
   */
  static getTelegramUser(): TelegramUser | null {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç Getting Telegram user...');
    }

    if (!this.isTelegramWebAppAvailable()) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ö†Ô∏è Telegram WebApp not available, using mock user');
        return this.getMockUser();
      }
      return null;
    }

    const user = window.Telegram!.WebApp.initDataUnsafe.user;
    
    if (!user) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ö†Ô∏è No user in initDataUnsafe, using mock user');
        return this.getMockUser();
      }
      return null;
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('‚úÖ Got Telegram user:', user);
    }

    return user;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ auth_date
   */
  static validateUser(user: TelegramUser): AuthValidationResult {
    if (!user) {
      return {
        isValid: false,
        error: ERROR_MESSAGES.NO_USER_DATA
      };
    }

    if (!user.id || !user.first_name) {
      return {
        isValid: false,
        error: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ auth_date —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!user.id.toString().startsWith(AUTH_CONSTANTS.MOCK_USER_ID_PREFIX)) {
      const authDate = window.Telegram?.WebApp?.initDataUnsafe?.auth_date;
      
      if (authDate) {
        const authTime = authDate * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        const currentTime = Date.now();
        const maxAge = AUTH_CONSTANTS.MAX_AUTH_AGE_HOURS * 60 * 60 * 1000;
        
        if (currentTime - authTime > maxAge) {
          return {
            isValid: false,
            error: ERROR_MESSAGES.AUTH_DATE_EXPIRED
          };
        }
      }
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('‚úÖ User validation passed');
    }

    return {
      isValid: true,
      user
    };
  }

  /**
   * –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async validateOnServerCached(initData: string, botToken: string): Promise<boolean> {
    const cacheKey = `${initData}_${botToken}`;
    const cached = this.validationCache.get(cacheKey);
    
    if (cached && (Date.now() - cached.timestamp) < AUTH_CONSTANTS.CACHE_DURATION_MS) {
      if (process.env.NODE_ENV === 'development') {
        console.log('üìã Using cached validation result');
      }
      return cached.result;
    }
    
    const result = await this.validateOnServerWithRetry(initData, botToken);
    this.validationCache.set(cacheKey, { 
      result, 
      timestamp: Date.now() 
    });
    
    return result;
  }

  /**
   * –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  static async validateOnServerWithRetry(
    initData: string, 
    botToken: string, 
    retryCount = 0
  ): Promise<boolean> {
    try {
      return await this.validateOnServer(initData, botToken);
    } catch (error) {
      if (retryCount < AUTH_CONSTANTS.MAX_RETRIES) {
        if (process.env.NODE_ENV === 'development') {
          console.log(`üîÑ Retrying validation (${retryCount + 1}/${AUTH_CONSTANTS.MAX_RETRIES})`);
        }
        
        const delay = AUTH_CONSTANTS.RETRY_DELAY_BASE * Math.pow(2, retryCount);
        await new Promise(resolve => setTimeout(resolve, delay));
        
        return this.validateOnServerWithRetry(initData, botToken, retryCount + 1);
      }
      
      if (process.env.NODE_ENV === 'development') {
        console.error('‚ùå Server validation failed after retries:', error);
      }
      
      return false;
    }
  }

  /**
   * –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
   */
  static async validateOnServer(initData: string, botToken: string): Promise<boolean> {
    if (!initData || !botToken) {
      if (process.env.NODE_ENV === 'development') {
        console.error('‚ùå Missing initData or botToken for validation');
      }
      return false;
    }

    try {
      const apiUrl = import.meta.env.VITE_API_URL;
      if (!apiUrl) {
        throw new Error(ERROR_MESSAGES.MISSING_CONFIG);
      }

      const response = await fetch(`${apiUrl}${API_ENDPOINTS.VALIDATE_TELEGRAM}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ initData, botToken }),
      });

      if (!response.ok) {
        throw new Error(`Server validation failed: ${response.status} ${response.statusText}`);
      }

      const result: ServerValidationResponse = await response.json();
      
      if (typeof result.valid !== 'boolean') {
        throw new Error(ERROR_MESSAGES.INVALID_RESPONSE);
      }

      if (process.env.NODE_ENV === 'development') {
        console.log('‚úÖ Server validation result:', result.valid);
      }

      return result.valid;
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('‚ùå Server validation error:', error);
      }
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
   */
  static initializeTelegramWebApp(): void {
    if (!this.isTelegramWebAppAvailable()) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ö†Ô∏è Telegram WebApp not available, skipping initialization');
      }
      return;
    }

    try {
      const tg = window.Telegram!.WebApp;
      
      tg.ready();
      tg.expand();
      tg.enableClosingConfirmation();
      tg.disableVerticalSwipes();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
      if (tg.colorScheme === 'dark') {
        document.body.classList.add('dark-theme');
      }

      if (process.env.NODE_ENV === 'development') {
        console.log('üì± Telegram WebApp initialized successfully');
        console.log('üé® Color scheme:', tg.colorScheme);
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('‚ùå Error initializing Telegram WebApp:', error);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  private static getMockUser(): TelegramUser {
    return {
      id: parseInt(`${AUTH_CONSTANTS.MOCK_USER_ID_PREFIX}${Date.now()}`),
      first_name: 'Test User',
      last_name: 'Developer',
      username: 'test_user',
      language_code: 'ru'
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  static validateEnvironment(): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    if (!import.meta.env.VITE_API_URL) {
      errors.push('VITE_API_URL is not configured');
    }
    
    if (!import.meta.env.VITE_BOT_TOKEN && process.env.NODE_ENV === 'production') {
      errors.push('VITE_BOT_TOKEN is required in production');
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static getLanguageCode(): string {
    return window.Telegram?.WebApp?.initDataUnsafe?.user?.language_code || 'en';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static getUserPhoto(): string | null {
    return window.Telegram?.WebApp?.initDataUnsafe?.user?.photo_url || null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ query_id
   */
  static getQueryId(): string | null {
    return window.Telegram?.WebApp?.initDataUnsafe?.query_id || null;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  static closeTelegramApp(): void {
    try {
      window.Telegram?.WebApp?.close();
      if (process.env.NODE_ENV === 'development') {
        console.log('üì± Telegram app closed');
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error closing Telegram app:', error);
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  static clearValidationCache(): void {
    this.validationCache.clear();
    if (process.env.NODE_ENV === 'development') {
      console.log('üóëÔ∏è Validation cache cleared');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  static getCacheStats(): { size: number; entries: number } {
    return {
      size: this.validationCache.size,
      entries: Array.from(this.validationCache.values()).length
    };
  }
}

// ===== –≠–ö–°–ü–û–†–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –¢–ò–ü–û–í =====
export type { 
  TelegramUser,
  TelegramWebApp,
  AuthValidationResult,
  ServerValidationResponse 
};

export { AUTH_CONSTANTS, ERROR_MESSAGES, API_ENDPOINTS };
