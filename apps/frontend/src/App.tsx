// src/App.tsx - –ö–û–†–ù–ï–í–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø

import React, { useEffect, useState, Suspense, lazy } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Container, Spinner, Alert } from 'react-bootstrap';
import { Helmet, HelmetProvider } from 'react-helmet-async';
import { GameSettingsProvider } from './context/GameSettingsProvider';
import { GameProvider } from './context/GameProvider';
import { AuthProvider } from './hooks/useAuth';
import { useGame } from './context/GameProvider';
import ErrorBoundary from './components/ErrorBoundary';
import ConnectionStatus from './components/ConnectionStatus';
import BottomNavbar from './components/BottomNavbar';
import type { GameMode, ThrowingMode, CardCount, PlayerCount } from '@shared/types';
// ===== –¢–ò–ü–´ TELEGRAM =====
declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        ready(): void;
        expand(): void;
        enableClosingConfirmation(): void;
        disableVerticalSwipes(): void;
        colorScheme?: 'light' | 'dark';
      };
    };
  }
}

// ===== LAZY LOADING –°–¢–†–ê–ù–ò–¶ =====

const MainMenu = lazy(() => import('./pages/MainMenu'));
const LoginPage = lazy(() => import('./pages/LoginPage'));
const GameSettingsPage = lazy(() => import('./pages/GameSettingsPage'));
const RoomListPage = lazy(() => import('./pages/RoomListPage'));
const GameRoomPage = lazy(() => import('./pages/GameRoomPage'));
const GamePlayPage = lazy(() => import('./pages/GamePlayPage'));
const FriendsPage = lazy(() => import('./pages/FriendsPage'));

// ===== –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

/**
 * Props –¥–ª—è App
 */
export interface AppProps {
  // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã props –≤ –±—É–¥—É—â–µ–º
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const APP_CONFIG = {
  TELEGRAM_INIT_DELAY: 500,
  PAGE_LOAD_TIMEOUT: 10000
} as const;

const META_CONFIG = {
  TITLE: '–î—É—Ä–∞–∫ –û–Ω–ª–∞–π–Ω - Telegram Mini App',
  DESCRIPTION: '–ò–≥—Ä–∞–π—Ç–µ –≤ –¥—É—Ä–∞–∫–∞ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ Telegram',
  THEME_COLOR: '#1a1a2e',
  VIEWPORT: 'width=device-width, initial-scale=1.0, user-scalable=no'
} as const;

const CSS_CLASSES = {
  APP_CONTAINER: 'app-container',
  MAIN_CONTENT: 'main-content',
  PAGE_LOADER: 'page-loader',
  ERROR_PAGE: 'error-page'
} as const;

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢–´ =====

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
const PageLoader: React.FC = () => (
  <Container className={`${CSS_CLASSES.PAGE_LOADER} d-flex justify-content-center align-items-center min-vh-100`}>
    <div className="text-center">
      <Spinner animation="border" className="mb-3" />
      <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
    </div>
  </Container>
);

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—à–∏–±–∫–∏
 */
const ErrorPage: React.FC = () => (
  <Container className={`${CSS_CLASSES.ERROR_PAGE} text-center mt-5`}>
    <h2>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
    <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
    <button 
      className="btn btn-primary"
      onClick={() => window.location.href = '/'}
      aria-label="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"
    >
      –ù–∞ –≥–ª–∞–≤–Ω—É—é
    </button>
  </Container>
);

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
 */

const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, telegramUser } = useGame();
  
  console.log('üõ°Ô∏è ProtectedRoute check:', {
    isAuthenticated,
    hasTelegramUser: !!telegramUser,
    currentPath: window.location.pathname,
    timestamp: Date.now()
  });

  // –¢–û–õ–¨–ö–û –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ!
  if (!isAuthenticated || !telegramUser) {
    console.log('üö´ ProtectedRoute BLOCKING - redirecting to /login');
    return <Navigate to="/login" replace />;
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–°–ï–ì–î–ê –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
  return <>{children}</>;
};
  

/**
 * –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const AppRoutes: React.FC = () => {
  const { isAuthenticated } = useGame();
   console.log('üó∫Ô∏è AppRoutes check:', {
    isAuthenticated,
    currentPath: window.location.pathname,
    timestamp: Date.now()
  });  

  return (
    <Suspense fallback={<PageLoader />}>
      <Routes>
        {/* –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
        <Route 
          path="/login" 
          element={
            isAuthenticated ? <Navigate to="/" replace /> : <LoginPage />
          } 
        />
        
        {/* –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <MainMenu />
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/settings" 
          element={
            <ProtectedRoute>
              <GameSettingsPage />
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/rooms" 
          element={
            <ProtectedRoute>
              <RoomListPage />
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/room/:roomId" 
          element={
            <ProtectedRoute>
              <GameRoomPage />
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/game" 
          element={
            <ProtectedRoute>
              <GamePlayPage />
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/friends" 
          element={
            <ProtectedRoute>
              <FriendsPage />
            </ProtectedRoute>
          } 
        />
        
        {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ */}
        <Route path="*" element={<ErrorPage />} />
      </Routes>
    </Suspense>
  );
};

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====

/**
 * –ö–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const App: React.FC<AppProps> = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [isOnline, setIsOnline] = useState<boolean>(navigator.onLine);
  const [isInitialized, setIsInitialized] = useState<boolean>(false);

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP =====

  useEffect(() => {
    const initializeTelegramWebApp = async () => {
      try {
        if (window.Telegram?.WebApp) {
          const tg = window.Telegram.WebApp;
          tg.ready();
          tg.expand();
          tg.enableClosingConfirmation();
          tg.disableVerticalSwipes();
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
          if (tg.colorScheme === 'dark') {
            document.body.classList.add('dark-theme');
          }
          
          await new Promise(resolve => setTimeout(resolve, APP_CONFIG.TELEGRAM_INIT_DELAY));
        }
      } catch (error) {
        console.error('Telegram WebApp initialization error:', error);
      } finally {
        setIsInitialized(true);
      }
    };

    initializeTelegramWebApp();
  }, []);

  // ===== –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –û–ù–õ–ê–ô–ù –°–¢–ê–¢–£–°–ê =====

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // ===== EARLY RETURN –î–õ–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò =====

  if (!isInitialized) {
    return <PageLoader />;
  }

  // ===== –†–ï–ù–î–ï–† =====

return (
  <HelmetProvider>
    <ErrorBoundary>
      <Helmet>
        <title>{META_CONFIG.TITLE}</title>
        <meta name="description" content={META_CONFIG.DESCRIPTION} />
        <meta name="viewport" content={META_CONFIG.VIEWPORT} />
        <meta name="theme-color" content={META_CONFIG.THEME_COLOR} />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
      </Helmet>

      <GameSettingsProvider>
        <AuthProvider>
          <Router>
            <GameProvider>
              <div className={CSS_CLASSES.APP_CONTAINER}>
                {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ */}
                {!isOnline && (
                  <Alert variant="warning" className="mb-0 text-center">
                    –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
                  </Alert>
                )}

                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
                <ConnectionStatus />
                
                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <main className={CSS_CLASSES.MAIN_CONTENT}>
                  <AppRoutes />
                </main>
                
                {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
                <BottomNavbar />
              </div>
            </GameProvider>
          </Router>
        </AuthProvider>
      </GameSettingsProvider>
    </ErrorBoundary>
  </HelmetProvider>
);

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ displayName –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
App.displayName = 'App';

// ===== –≠–ö–°–ü–û–†–¢ =====
}
export default App;
export type { AppProps };
export { APP_CONFIG, META_CONFIG, CSS_CLASSES };
