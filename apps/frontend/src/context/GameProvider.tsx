// src/contexts/GameProvider.tsx - –û–°–ù–û–í–ù–û–ô –ü–†–û–í–ê–ô–î–ï–† –ò–ì–†–´

import React, { createContext, useContext, useMemo, useEffect, useState } from 'react';
import { 
  GameState, 
  Player, 
  Room, 
  AutoStartInfo,
  TelegramUser,
  ConnectionStatus,
  GameError,
  WebSocketResponse
} from '@shared/types';
import { useAuth } from '../hooks/useAuth';
import { useWebSocket } from '../hooks/useWebSocket';
import { useGameState } from '../hooks/useGameState';
import { useRoomManager } from '../hooks/useRoomManager';

// ===== –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä—ã
 */
export interface GameContextState {
  // WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  socket: WebSocket | null;
  isConnected: boolean;
  connectionStatus: ConnectionStatus;
  
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  telegramUser: TelegramUser | null;
  isAuthenticated: boolean;
  authToken: string | null;
  currentPlayer: Player | null;
  
  // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  gameState: GameState | null;
  
  // –ö–æ–º–Ω–∞—Ç—ã
  rooms: Room[];
  currentRoom: Room | null;
  autoStartInfo: AutoStartInfo | null;
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
  notification: string | null;
  error: string | null;
  errors: GameError[];
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean;
  loadingStates: {
    connecting: boolean;
    authenticating: boolean;
    joiningRoom: boolean;
    startingGame: boolean;
    makingAction: boolean;
  };
}

/**
 * –ú–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä—ã
 */
export interface GameContextMethods {
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  authenticate: () => Promise<boolean>;
  logout: () => void;
  
  // WebSocket
  connect: () => Promise<void>;
  disconnect: () => void;
  clearError: () => void;
  
  // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  makeGameAction: (action: import('@shared/types').GameAction) => Promise<void>;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–∞–º–∏
  createRoom: (name: string, rules: import('@shared/types').GameRules, isPrivate?: boolean) => Promise<void>;
  joinRoom: (roomId: string) => Promise<void>;
  leaveRoom: () => Promise<void>;
  setReady: () => Promise<void>;
  startGame: () => Promise<void>;
  refreshRooms: () => Promise<void>;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  clearNotification: () => void;
  addError: (error: GameError) => void;
  clearErrors: () => void;
}

/**
 * –ü–æ–ª–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export interface GameContextType extends GameContextState, GameContextMethods {}

/**
 * Props –¥–ª—è GameProvider
 */
interface GameProviderProps {
  children: React.ReactNode;
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

const MAX_ERRORS_HISTORY = 10;

const LOADING_STATES_DEFAULT = {
  connecting: false,
  authenticating: false,
  joiningRoom: false,
  startingGame: false,
  makingAction: false
};

// ===== –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê =====

const GameContext = createContext<GameContextType | null>(null);

// ===== –ü–†–û–í–ê–ô–î–ï–† =====

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–≥—Ä—ã
 */
export const GameProvider: React.FC<GameProviderProps> = ({ children }) => {
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [errors, setErrors] = useState<GameError[]>([]);
  const [loadingStates, setLoadingStates] = useState(LOADING_STATES_DEFAULT);

  // –•—É–∫–∏
  const auth = useAuth();
  const webSocket = useWebSocket(auth.authToken, auth.telegramUser);
  const gameState = useGameState(webSocket.socket);
  const roomManager = useRoomManager(webSocket.socket);
  useEffect(() => {
  if (webSocket.socket) {
    const handleMessage = (event: MessageEvent) => {
      try {
        const message: WebSocketResponse = JSON.parse(event.data);
        console.log('üì® GameProvider received message:', message);
        
        if (message.type === 'authenticated' && message.token) {
          console.log('‚úÖ Processing authentication success in GameProvider');
          localStorage.setItem('authToken', message.token);
           auth.authenticate();
        }  
        
      } catch (error) {
        console.error('‚ùå GameProvider message parse error:', error);
      }
    };
    
    webSocket.socket.addEventListener('message', handleMessage);
    
    return () => {
      webSocket.socket?.removeEventListener('message', handleMessage);
    };
  }
}, [webSocket.socket, auth]);
  

  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ê–ú–ò =====

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  const addError = (error: GameError) => {
    setErrors(prev => {
      const newErrors = [error, ...prev];
      return newErrors.slice(0, MAX_ERRORS_HISTORY);
    });
  };

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫
   */
  const clearErrors = () => {
    setErrors([]);
  };

  /**
   * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  const clearError = () => {
    webSocket.clearError();
    gameState.clearError();
    roomManager.clearError();
  };

  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò –ó–ê–ì–†–£–ó–ö–ò =====

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  const updateLoadingState = (key: keyof typeof LOADING_STATES_DEFAULT, value: boolean) => {
    setLoadingStates(prev => ({
      ...prev,
      [key]: value
    }));
  };

  // ===== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ =====

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  const authenticate = async (): Promise<boolean> => {
    updateLoadingState('authenticating', true);
    try {
      const result = await auth.authenticate();
      return result;
    } finally {
      updateLoadingState('authenticating', false);
    }
  };

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  const connect = async (): Promise<void> => {
    updateLoadingState('connecting', true);
    try {
      await webSocket.connect();
    } finally {
      updateLoadingState('connecting', false);
    }
  };

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  const createRoom = async (
    name: string, 
    rules: import('@shared/types').GameRules, 
    isPrivate = false
  ): Promise<void> => {
    updateLoadingState('joiningRoom', true);
    try {
      await roomManager.createRoom(name, rules, isPrivate);
    } finally {
      updateLoadingState('joiningRoom', false);
    }
  };

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  const joinRoom = async (roomId: string): Promise<void> => {
    updateLoadingState('joiningRoom', true);
    try {
      await roomManager.joinRoom(roomId);
    } finally {
      updateLoadingState('joiningRoom', false);
    }
  };

  /**
   * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  const startGame = async (): Promise<void> => {
    updateLoadingState('startingGame', true);
    try {
      await roomManager.startGame();
    } finally {
      updateLoadingState('startingGame', false);
    }
  };

  /**
   * –ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  const makeGameAction = async (action: import('@shared/types').GameAction): Promise<void> => {
    updateLoadingState('makingAction', true);
    try {
      await gameState.makeGameAction(action);
    } finally {
      updateLoadingState('makingAction', false);
    }
  };

  // ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –û–®–ò–ë–û–ö =====

  useEffect(() => {
    if (auth.error) {
      addError({
        type: 'auth',
        message: auth.error,
        timestamp: new Date()
      });
    }
  }, [auth.error]);

  useEffect(() => {
    if (webSocket.error) {
      addError({
        type: 'websocket',
        message: webSocket.error,
        timestamp: new Date()
      });
    }
  }, [webSocket.error]);

  useEffect(() => {
    if (gameState.error) {
      addError({
        type: 'game',
        message: gameState.error,
        timestamp: new Date()
      });
    }
  }, [gameState.error]);

  useEffect(() => {
    if (roomManager.error) {
      addError({
        type: 'room',
        message: roomManager.error,
        timestamp: new Date()
      });
    }
  }, [roomManager.error]);

  // ===== –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê =====

  const contextValue: GameContextType = useMemo(() => {
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const isLoading = Object.values(loadingStates).some(Boolean) ||
      auth.isLoading ||
      gameState.isLoading ||
      roomManager.isLoading;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const primaryError = auth.error || 
      webSocket.error || 
      gameState.error || 
      roomManager.error;

    return {
      // WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      socket: webSocket.socket,
      isConnected: webSocket.isConnected,
      connectionStatus: webSocket.connectionStatus,
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      telegramUser: auth.telegramUser,
      isAuthenticated: auth.isAuthenticated,
      authToken: auth.authToken,
      currentPlayer: auth.currentPlayer,
      
      // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      gameState: gameState.gameState,
      
      // –ö–æ–º–Ω–∞—Ç—ã
      rooms: roomManager.rooms,
      currentRoom: roomManager.currentRoom,
      autoStartInfo: roomManager.autoStartInfo,
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
      notification: roomManager.notification,
      error: primaryError,
      errors,
      
      // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      isLoading,
      loadingStates,
      
      // –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      authenticate,
      logout: auth.logout,
      
      // WebSocket –º–µ—Ç–æ–¥—ã
      connect,
      disconnect: webSocket.disconnect,
      clearError,
      
      // –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
      makeGameAction,
      
      // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
      createRoom,
      joinRoom,
      leaveRoom: roomManager.leaveRoom,
      setReady: roomManager.setReady,
      startGame,
      refreshRooms: roomManager.refreshRooms,
      
      // –£—Ç–∏–ª–∏—Ç—ã
      clearNotification: roomManager.clearNotification,
      addError,
      clearErrors
    };
  }, [
    // WebSocket –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    webSocket.socket,
    webSocket.isConnected,
    webSocket.connectionStatus,
    webSocket.error,
    webSocket.disconnect,
    webSocket.clearError,
    
    // Auth –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    auth.telegramUser,
    auth.isAuthenticated,
    auth.authToken,
    auth.currentPlayer,
    auth.error,
    auth.isLoading,
    auth.logout,
    
    // Game state –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    gameState.gameState,
    gameState.error,
    gameState.isLoading,
    gameState.clearError,
    
    // Room manager –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    roomManager.rooms,
    roomManager.currentRoom,
    roomManager.autoStartInfo,
    roomManager.notification,
    roomManager.error,
    roomManager.isLoading,
    roomManager.leaveRoom,
    roomManager.setReady,
    roomManager.refreshRooms,
    roomManager.clearNotification,
    roomManager.clearError,
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    errors,
    loadingStates,
    
    // –ú–µ—Ç–æ–¥—ã
    authenticate,
    connect,
    createRoom,
    joinRoom,
    startGame,
    makeGameAction,
    clearError,
    addError,
    clearErrors
  ]);

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ü–†–û–í–ê–ô–î–ï–†–ê =====

  try {
    return (
      <GameContext.Provider value={contextValue}>
        {children}
      </GameContext.Provider>
    );
  } catch (error) {
    console.error('GameProvider error:', error);
    return (
      <div style={{ padding: '20px', textAlign: 'center' }}>
        <h2>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã</h2>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
        <button onClick={() => window.location.reload()}>
          –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    );
  }
};

// ===== –•–£–ö –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê =====

/**
 * –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export const useGame = (): GameContextType => {
  const context = useContext(GameContext);
  
  if (!context) {
    throw new Error('useGame must be used within a GameProvider');
  }
  
  return context;
};

// ===== –≠–ö–°–ü–û–†–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –¢–ò–ü–û–í =====
export type { GameProviderProps };
