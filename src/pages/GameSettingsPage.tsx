// src/pages/GameSettingsPage.tsx - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –•–û–°–¢–ê –í –ö–û–ú–ù–ê–¢–£
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Form, Button, ButtonGroup, Alert } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { useGame } from '../context/GameProvider';
import { useGameSettings } from '../context/GameSettingsProvider';
import { Rules } from '../../shared/types';

const GameSettingsPage: React.FC = () => {
  const navigate = useNavigate();
  const { createRoom, isConnected, error } = useGame();
  
  const {
    gameMode,
    throwingMode,
    cardCount,
    maxPlayers,
    setGameMode,
    setThrowingMode,
    setCardCount,
    setMaxPlayers
  } = useGameSettings();

  const [roomName, setRoomName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [validationError, setValidationError] = useState<string | null>(null);

  // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –í –°–û–ó–î–ê–ù–ù–£–Æ –ö–û–ú–ù–ê–¢–£
  useEffect(() => {
    const handleRoomCreated = (event: CustomEvent) => {
      console.log('üéâ Room created, redirecting host to room:', event.detail.room.id);
      setIsCreating(false);
      setValidationError(null);
      
      // ‚úÖ –°–†–ê–ó–£ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–ï–ú –í –°–û–ó–î–ê–ù–ù–£–Æ –ö–û–ú–ù–ê–¢–£
      navigate(`/room/${event.detail.room.id}`);
    };
    
    const handleRoomError = (event: CustomEvent) => {
      console.log('‚ùå Room error event received:', event.detail);
      setIsCreating(false);
      setValidationError(event.detail.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
    };
    
    window.addEventListener('room-created', handleRoomCreated as EventListener);
    window.addEventListener('room-error', handleRoomError as EventListener);
    
    return () => {
      window.removeEventListener('room-created', handleRoomCreated as EventListener);
      window.removeEventListener('room-error', handleRoomError as EventListener);
    };
  }, [navigate]);

  const handleGameModeChange = (mode: Rules['gameMode']) => {
    setGameMode(mode);
  };

  const handleThrowingModeChange = (mode: Rules['throwingMode']) => {
    setThrowingMode(mode);
  };

  const handleCardCountChange = (count: Rules['cardCount']) => {
    setCardCount(count);
  };

  const handleMaxPlayersChange = (count: number) => {
    setMaxPlayers(count);
  };

  const validateSettings = (): string | null => {
    if (!roomName.trim()) {
      return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã';
    }
    
    if (roomName.trim().length < 3) {
      return '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
    }
    
    if (roomName.trim().length > 30) {
      return '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    
    return null;
  };

  const handleCreateRoom = async () => {
    const error = validateSettings();
    if (error) {
      setValidationError(error);
      return;
    }

    if (!isConnected) {
      setValidationError('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    setIsCreating(true);
    setValidationError(null);
    
    try {
      const rules: Rules = {
        gameMode,
        throwingMode,
        cardCount,
        maxPlayers,
      };

      console.log('üè† Creating room:', roomName.trim(), 'with rules:', rules);
      createRoom(roomName.trim(), rules);
      
      // ‚úÖ –ù–ï –ù–£–ñ–ï–ù TIMEOUT - —Å–æ–±—ã—Ç–∏–µ room-created –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ
      console.log('Room creation request sent to server');
      
    } catch (err) {
      console.error('Error creating room:', err);
      setValidationError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
      setIsCreating(false);
    }
  };

  const handleBack = () => {
    navigate('/');
  };

  return (
    <Container className="py-4">
      <Row>
        <Col lg={8} className="mx-auto">
          <Card>
            <Card.Header className="d-flex align-items-center">
              <Button variant="link" onClick={handleBack} className="p-0 me-3">
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              <h5 className="mb-0">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã</h5>
            </Card.Header>
            <Card.Body>
              {/* –û—à–∏–±–∫–∏ */}
              {(error || validationError) && (
                <Alert variant="danger">
                  {validationError || error}
                </Alert>
              )}

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ */}
              {isCreating && (
                <Alert variant="info">
                  <div className="d-flex align-items-center">
                    <span className="spinner-border spinner-border-sm me-2" />
                    <div>
                      <strong>–°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É...</strong>
                      <br />
                      <small>–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–µ—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è</small>
                    </div>
                  </div>
                </Alert>
              )}

              {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã */}
              <Form.Group className="mb-4">
                <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"
                  value={roomName}
                  onChange={(e) => setRoomName(e.target.value)}
                  maxLength={30}
                  disabled={isCreating}
                />
                <Form.Text className="text-muted">
                  {roomName.length}/30 —Å–∏–º–≤–æ–ª–æ–≤
                </Form.Text>
              </Form.Group>

              {/* –†–µ–∂–∏–º –∏–≥—Ä—ã */}
              <Form.Group className="mb-4">
                <Form.Label>–†–µ–∂–∏–º –∏–≥—Ä—ã</Form.Label>
                <ButtonGroup className="d-block">
                  <Button
                    variant={gameMode === 'classic' ? 'primary' : 'outline-primary'}
                    onClick={() => handleGameModeChange('classic')}
                    disabled={isCreating}
                    className="me-2 mb-2"
                  >
                    –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π
                  </Button>
                  <Button
                    variant={gameMode === 'transferable' ? 'primary' : 'outline-primary'}
                    onClick={() => handleGameModeChange('transferable')}
                    disabled={isCreating}
                    className="mb-2"
                  >
                    –ü–µ—Ä–µ–≤–æ–¥–Ω–æ–π
                  </Button>
                </ButtonGroup>
                <Form.Text className="text-muted d-block">
                  {gameMode === 'classic' && '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥—É—Ä–∞–∫–∞'}
                  {gameMode === 'transferable' && '–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∞—Ç–∞–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞'}
                </Form.Text>
              </Form.Group>

              {/* –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ */}
              <Form.Group className="mb-4">
                <Form.Label>–ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ</Form.Label>
                <ButtonGroup className="d-block">
                  <Button
                    variant={throwingMode === 'standard' ? 'primary' : 'outline-primary'}
                    onClick={() => handleThrowingModeChange('standard')}
                    disabled={isCreating}
                    className="me-2 mb-2"
                  >
                    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
                  </Button>
                  <Button
                    variant={throwingMode === 'smart' ? 'primary' : 'outline-primary'}
                    onClick={() => handleThrowingModeChange('smart')}
                    disabled={isCreating}
                    className="mb-2"
                  >
                    –£–º–Ω–æ–µ
                  </Button>
                </ButtonGroup>
                <Form.Text className="text-muted d-block">
                  {throwingMode === 'standard' && '–û–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è'}
                  {throwingMode === 'smart' && '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ'}
                </Form.Text>
              </Form.Group>

              {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç */}
              <Form.Group className="mb-4">
                <Form.Label>–ö–∞—Ä—Ç –Ω–∞ —Ä—É–∫–∞—Ö</Form.Label>
                <ButtonGroup className="d-block">
                  {[6, 8, 10].map((count) => (
                    <Button
                      key={count}
                      variant={cardCount === count ? 'primary' : 'outline-primary'}
                      onClick={() => handleCardCountChange(count)}
                      disabled={isCreating}
                      className="me-2 mb-2"
                    >
                      {count} –∫–∞—Ä—Ç
                    </Button>
                  ))}
                </ButtonGroup>
                <Form.Text className="text-muted">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞–µ—Ç –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
                </Form.Text>
              </Form.Group>

              {/* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ */}
              <Form.Group className="mb-4">
                <Form.Label>–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤</Form.Label>
                <ButtonGroup className="d-block">
                  {[2, 3, 4, 5, 6].map((count) => (
                    <Button
                      key={count}
                      variant={maxPlayers === count ? 'primary' : 'outline-primary'}
                      onClick={() => handleMaxPlayersChange(count)}
                      disabled={isCreating}
                      className="me-2 mb-2"
                    >
                      {count}
                    </Button>
                  ))}
                </ButtonGroup>
                <Form.Text className="text-muted">
                  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
                </Form.Text>
              </Form.Group>

              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
              <div className="d-grid">
                <Button 
                  variant="primary" 
                  size="lg" 
                  onClick={handleCreateRoom} 
                  disabled={isCreating || !isConnected}
                >
                  {isCreating ? (
                    <>
                      <span className="spinner-border spinner-border-sm me-2" />
                      –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã...
                    </>
                  ) : (
                    <>
                      üè† –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏ –≤–æ–π—Ç–∏
                    </>
                  )}
                </Button>
              </div>

              {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
              {!isCreating && (
                <div className="mt-3">
                  <small className="text-muted">
                    <i className="bi bi-info-circle me-1"></i>
                    –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–µ—Ç–µ –≤ –º–µ–Ω—é –æ–∂–∏–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
                  </small>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default GameSettingsPage;
