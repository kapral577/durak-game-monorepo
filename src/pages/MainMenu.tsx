// src/pages/MainMenu.tsx - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Alert, Badge } from 'react-bootstrap';
import { TelegramAuth } from '../utils/TelegramAuth';
import { useGame } from '../context/GameProvider';

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
const UI_TEXT = {
  GAME_TITLE: 'üÉè –î—É—Ä–∞–∫ –û–Ω–ª–∞–π–Ω',
  GAME_SUBTITLE: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –æ–Ω–ª–∞–π–Ω',
  WELCOME_MESSAGE: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!',
  QUICK_GAME: '‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞',
  CREATE_ROOM: 'üè† –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
  JOIN_ROOM: 'üéØ –ù–∞–π—Ç–∏ –∏–≥—Ä—É',
  INVITE_FRIENDS: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
  GAME_RULES: 'üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã',
  SETTINGS: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
  TELEGRAM_ERROR: '–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ Telegram.',
  DEV_MODE_NOTICE: '**–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  LOADING_TEXT: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...',
  RECONNECT_BUTTON: 'üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
  CONNECTION_STATUS: '–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
} as const;

const MainMenu: React.FC = () => {
  const navigate = useNavigate();
  const { telegramUser, isConnected, error, connect } = useGame();
  
  const [isInitializing, setIsInitializing] = useState(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        if (window.Telegram?.WebApp) {
          const tg = window.Telegram.WebApp;
          tg.ready();
          tg.expand();
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–≥—Ä—ã
          tg.enableClosingConfirmation();
          tg.disableVerticalSwipes();
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
        setIsInitializing(false);
      } catch (err) {
        console.error('Initialization error:', err);
        setIsInitializing(false);
      }
    };

    initializeApp();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const handleQuickGame = () => {
    navigate('/rooms');
  };

  const handleCreateRoom = () => {
    navigate('/settings');
  };

  const handleJoinRoom = () => {
    navigate('/rooms');
  };

  const handleInviteFriends = () => {
    navigate('/friends');
  };

  const handleReconnect = () => {
    connect();
  };

  // Loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (isInitializing) {
    return (
      <Container className="main-menu-container">
        <div className="text-center">
          <div className="spinner-border text-primary mb-3" role="status">
            <span className="visually-hidden">{UI_TEXT.LOADING_TEXT}</span>
          </div>
          <p className="text-muted">{UI_TEXT.LOADING_TEXT}</p>
        </div>
      </Container>
    );
  }

  return (
    <Container className="main-menu-container">
      <Row className="justify-content-center">
        <Col md={8} lg={6}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã */}
          <Card className="text-center mb-4">
            <Card.Body>
              <h1 className="display-4 mb-2">{UI_TEXT.GAME_TITLE}</h1>
              <p className="lead text-muted">{UI_TEXT.GAME_SUBTITLE}</p>
              
              {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
              {telegramUser && (
                <Alert variant="success" className="mb-0">
                  <h5 className="mb-0">
                    {UI_TEXT.WELCOME_MESSAGE.replace('{name}', telegramUser.name)}
                  </h5>
                </Alert>
              )}
            </Card.Body>
          </Card>

          {/* –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
          <Card className="mb-4">
            <Card.Body>
              <div className="d-flex justify-content-between align-items-center">
                <span>{UI_TEXT.CONNECTION_STATUS}:</span>
                <div>
                  <Badge bg={isConnected ? 'success' : 'danger'} className="me-2">
                    {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
                  </Badge>
                  {!isConnected && (
                    <Button variant="outline-primary" size="sm" onClick={handleReconnect}>
                      {UI_TEXT.RECONNECT_BUTTON}
                    </Button>
                  )}
                </div>
              </div>
            </Card.Body>
          </Card>

          {/* –û—à–∏–±–∫–∏ */}
          {error && (
            <Alert variant="danger" className="mb-4">
              {error}
            </Alert>
          )}

          {/* –û—à–∏–±–∫–∞ Telegram */}
          {!TelegramAuth.isInTelegram() && process.env.NODE_ENV === 'production' && (
            <Alert variant="warning" className="mb-4">
              <Alert.Heading>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</Alert.Heading>
              {UI_TEXT.TELEGRAM_ERROR}
            </Alert>
          )}

          {/* –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
          {process.env.NODE_ENV === 'development' && (
            <Alert variant="info" className="mb-4">
              <small>{UI_TEXT.DEV_MODE_NOTICE}</small>
            </Alert>
          )}

          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <Card className="mb-4">
            <Card.Body>
              <div className="d-grid gap-3">
                {/* –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ */}
                <Button 
                  variant="primary" 
                  size="lg" 
                  onClick={handleQuickGame}
                  disabled={!isConnected}
                >
                  {UI_TEXT.QUICK_GAME}
                </Button>

                {/* –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É */}
                <Button 
                  variant="success" 
                  size="lg" 
                  onClick={handleCreateRoom}
                  disabled={!isConnected}
                >
                  {UI_TEXT.CREATE_ROOM}
                </Button>

                {/* –ù–∞–π—Ç–∏ –∏–≥—Ä—É */}
                <Button 
                  variant="outline-primary" 
                  size="lg" 
                  onClick={handleJoinRoom}
                  disabled={!isConnected}
                >
                  {UI_TEXT.JOIN_ROOM}
                </Button>
              </div>
            </Card.Body>
          </Card>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <Card>
            <Card.Body>
              <Row className="g-2">
                {/* –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π */}
                <Col xs={6}>
                  <Button 
                    variant="outline-secondary" 
                    className="w-100"
                    onClick={handleInviteFriends}
                    disabled={!isConnected}
                  >
                    {UI_TEXT.INVITE_FRIENDS}
                  </Button>
                </Col>

                {/* –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã */}
                <Col xs={6}>
                  <Button 
                    variant="outline-info" 
                    className="w-100"
                    onClick={() => {
                      // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
                      alert('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
                    }}
                  >
                    {UI_TEXT.GAME_RULES}
                  </Button>
                </Col>
              </Row>
            </Card.Body>
          </Card>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ */}
          <div className="text-center mt-4">
            <small className="text-muted">
              –í–µ—Ä—Å–∏—è 1.0.0 | Telegram Mini App
            </small>
          </div>
        </Col>
      </Row>

      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <div className="decorative-blur top-center"></div>
      <div className="decorative-blur bottom-right"></div>
      <div className="decorative-blur left-side"></div>
    </Container>
  );
};

export default MainMenu;
