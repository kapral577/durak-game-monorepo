// src/pages/GameRoomPage.tsx - –§–†–û–ù–¢–ï–ù–î - –ò–°–ü–†–ê–í–õ–ï–ù–û
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Alert, Spinner, Badge, ProgressBar } from 'react-bootstrap';
import { useGame } from '../context/GameProvider';
import { Player } from '../../shared/types';

const GameRoomPage: React.FC = () => {
  const { roomId } = useParams<{ roomId: string }>();
  const navigate = useNavigate();
  const {
    currentRoom,
    currentPlayer,
    isConnected,
    gameState,
    setReady,
    startGame,
    leaveRoom,
    error,
    clearError,
    telegramUser
  } = useGame();

  const [isLoading, setIsLoading] = useState(true);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  useEffect(() => {
    if (!isConnected) return;

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (gameState && currentRoom?.id === roomId) {
      navigate(`/game/${roomId}`);
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –Ω–µ —Ç–∞ –∫–æ–º–Ω–∞—Ç–∞
    if (!currentRoom || currentRoom.id !== roomId) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
      console.warn('Room mismatch or not found');
      setTimeout(() => {
        setIsLoading(false);
      }, 2000);
    } else {
      setIsLoading(false);
    }
  }, [isConnected, currentRoom, roomId, gameState, navigate]);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
  useEffect(() => {
    if (gameState && currentRoom?.id === roomId) {
      navigate(`/game/${roomId}`);
    }
  }, [gameState, currentRoom, roomId, navigate]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (!isConnected || isLoading) {
    return (
      <Container className="py-4">
        <Row className="justify-content-center">
          <Col xs={12} md={8} lg={6}>
            <Card className="text-center py-5">
              <Card.Body>
                <Spinner animation="border" className="mb-3" />
                <h5>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ...</h5>
                <p className="text-muted">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã</p>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </Container>
    );
  }

  // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  if (!currentRoom) {
    return (
      <Container className="py-4">
        <Row className="justify-content-center">
          <Col xs={12} md={8} lg={6}>
            <Alert variant="warning">
              <Alert.Heading>–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</Alert.Heading>
              <p>–ö–æ–º–Ω–∞—Ç–∞ —Å ID {roomId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –Ω–µ–π.</p>
              <hr />
              <div className="d-flex justify-content-end">
                <Button variant="outline-warning" onClick={() => navigate('/rooms')}>
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç
                </Button>
              </div>
            </Alert>
          </Col>
        </Row>
      </Container>
    );
  }

  // –õ–æ–≥–∏–∫–∞ –∫–æ–º–Ω–∞—Ç—ã
  const isPlayerReady = currentPlayer?.isReady || false;
  const readyPlayersCount = currentRoom.players.filter(p => p.isReady).length;
  const canStartGame = currentRoom.players.length >= 2 && 
                      currentRoom.players.length <= currentRoom.maxPlayers && 
                      readyPlayersCount === currentRoom.players.length;
  const isRoomCreator = currentRoom.players[0]?.id === currentPlayer?.id;

  const handleReadyToggle = () => {
    setReady();
  };

  const handleStartGame = () => {
    if (canStartGame && isRoomCreator) {
      startGame();
    }
  };

  const handleLeaveRoom = () => {
    leaveRoom();
    navigate('/rooms');
  };

  const getPlayerStatus = (player: Player) => {
    if (player.isReady) {
      return <Badge bg="success">–ì–æ—Ç–æ–≤ ‚úì</Badge>;
    }
    return <Badge bg="secondary">–ñ–¥–µ—Ç...</Badge>;
  };

  const getGameModeText = (gameMode: string) => {
    switch (gameMode) {
      case 'classic': return '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π';
      case 'transferable': return '–ü–µ—Ä–µ–≤–æ–¥–Ω–æ–π';
      case 'smart': return '–£–º–Ω—ã–π';
      default: return gameMode;
    }
  };

  const getThrowingModeText = (throwingMode: string) => {
    switch (throwingMode) {
      case 'none': return '–ë–µ–∑ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è';
      case 'neighbors': return '–°–æ—Å–µ–¥–∏ –º–æ–≥—É—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å';
      case 'all': return '–í—Å–µ –º–æ–≥—É—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å';
      default: return throwingMode;
    }
  };

  return (
    <Container className="py-4">
      <Row className="justify-content-center">
        <Col xs={12} md={8} lg={6}>
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–Ω–∞—Ç—ã */}
          <Card className="mb-4">
            <Card.Header className="d-flex justify-content-between align-items-center">
              <div>
                <h4 className="mb-0">üè† {currentRoom.name}</h4>
                <small className="text-muted">ID: {currentRoom.id}</small>
              </div>
              <Badge bg={currentRoom.status === 'waiting' ? 'primary' : 'warning'}>
                {currentRoom.status === 'waiting' ? '–û–∂–∏–¥–∞–Ω–∏–µ' : '–í –∏–≥—Ä–µ'}
              </Badge>
            </Card.Header>
          </Card>

          {/* –û—à–∏–±–∫–∏ */}
          {error && (
            <Alert variant="danger" dismissible onClose={clearError} className="mb-4">
              <Alert.Heading>–û—à–∏–±–∫–∞</Alert.Heading>
              <p className="mb-0">{error}</p>
            </Alert>
          )}

          {/* –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã */}
          <Card className="mb-4">
            <Card.Header>
              <h6 className="mb-0">‚öôÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h6>
            </Card.Header>
            <Card.Body>
              <div className="row text-center">
                <div className="col-6 col-md-3">
                  <div className="text-primary fw-bold">{getGameModeText(currentRoom.rules.gameMode)}</div>
                  <small className="text-muted">–†–µ–∂–∏–º</small>
                </div>
                <div className="col-6 col-md-3">
                  <div className="text-success fw-bold">{currentRoom.rules.cardCount}</div>
                  <small className="text-muted">–ö–∞—Ä—Ç</small>
                </div>
                <div className="col-12 col-md-6">
                  <div className="text-info fw-bold small">{getThrowingModeText(currentRoom.rules.throwingMode)}</div>
                  <small className="text-muted">–ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ</small>
                </div>
              </div>
            </Card.Body>
          </Card>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
          <Card className="mb-4">
            <Card.Header>
              <div className="d-flex justify-content-between align-items-center">
                <h6 className="mb-0">üë• –ò–≥—Ä–æ–∫–∏ ({currentRoom.players.length}/{currentRoom.maxPlayers})</h6>
                <small className="text-muted">–ì–æ—Ç–æ–≤—ã: {readyPlayersCount}/{currentRoom.players.length}</small>
              </div>
            </Card.Header>
            <Card.Body>
              {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
              <ProgressBar 
                now={(readyPlayersCount / currentRoom.players.length) * 100} 
                variant={readyPlayersCount === currentRoom.players.length ? 'success' : 'primary'}
                className="mb-3"
                style={{ height: '8px' }}
              />

              {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
              <div className="d-flex flex-column gap-2">
                {currentRoom.players.map((player, index) => (
                  <div 
                    key={player.id} 
                    className={`d-flex align-items-center justify-content-between p-2 rounded ${
                      player.id === currentPlayer?.id ? 'bg-light border' : ''
                    }`}
                  >
                    <div className="d-flex align-items-center">
                      {/* –ê–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞ */}
                      <div 
                        className="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-3"
                        style={{ width: '40px', height: '40px', fontSize: '1.2rem' }}
                      >
                        {player.telegramId && player.avatar ? (
                          <img 
                            src={player.avatar} 
                            alt={player.name}
                            className="rounded-circle"
                            width={40}
                            height={40}
                          />
                        ) : (
                          player.name.charAt(0).toUpperCase()
                        )}
                      </div>
                      
                      <div>
                        <div className="fw-bold">
                          {player.name}
                          {player.id === currentPlayer?.id && <small className="text-muted ms-2">(–í—ã)</small>}
                          {index === 0 && <Badge bg="warning" className="ms-2">–•–æ—Å—Ç</Badge>}
                        </div>
                        {player.username && (
                          <small className="text-muted">@{player.username}</small>
                        )}
                      </div>
                    </div>
                    
                    <div className="d-flex align-items-center">
                      {getPlayerStatus(player)}
                    </div>
                  </div>
                ))}
              </div>

              {/* –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ */}
              {currentRoom.players.length < currentRoom.maxPlayers && (
                <div className="mt-2">
                  {Array.from({ length: currentRoom.maxPlayers - currentRoom.players.length }).map((_, index) => (
                    <div key={`empty-${index}`} className="d-flex align-items-center p-2 rounded border border-dashed">
                      <div 
                        className="rounded-circle bg-light border d-flex align-items-center justify-content-center me-3"
                        style={{ width: '40px', height: '40px' }}
                      >
                        <span className="text-muted">üë§</span>
                      </div>
                      <div className="text-muted">
                        <div>–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...</div>
                        <small>–°–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω</small>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </Card.Body>
          </Card>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <Card>
            <Card.Body>
              <div className="d-grid gap-2">
                
                {/* –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
                <Button 
                  variant={isPlayerReady ? 'outline-success' : 'success'}
                  size="lg"
                  onClick={handleReadyToggle}
                  disabled={!isConnected}
                >
                  {isPlayerReady ? (
                    <>
                      <span className="me-2">‚úì</span>
                      –ì–æ—Ç–æ–≤! (–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å)
                    </>
                  ) : (
                    <>
                      <span className="me-2">‚è≥</span>
                      –ù–∞–∂–º–∏—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã
                    </>
                  )}
                </Button>

                {/* –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–∞) */}
                {isRoomCreator && (
                  <Button 
                    variant="primary"
                    size="lg"
                    onClick={handleStartGame}
                    disabled={!canStartGame || !isConnected}
                  >
                    {canStartGame ? (
                      <>
                        <span className="me-2">üéÆ</span>
                        –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                      </>
                    ) : (
                      <>
                        <span className="me-2">‚è≥</span>
                        –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
                      </>
                    )}
                  </Button>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
                <Button 
                  variant="outline-danger"
                  onClick={handleLeaveRoom}
                >
                  <span className="me-2">üö™</span>
                  –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
                </Button>
              </div>

              {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
              <div className="mt-3">
                {!canStartGame && currentRoom.players.length < 2 && (
                  <Alert variant="info" className="mb-0 small">
                    <strong>üí° –°–æ–≤–µ—Ç:</strong> –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞. 
                    –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
                  </Alert>
                )}
                {!canStartGame && currentRoom.players.length >= 2 && readyPlayersCount < currentRoom.players.length && (
                  <Alert variant="warning" className="mb-0 small">
                    <strong>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ:</strong> –ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã. 
                    –ì–æ—Ç–æ–≤—ã—Ö: {readyPlayersCount} –∏–∑ {currentRoom.players.length}
                  </Alert>
                )}
                {canStartGame && isRoomCreator && (
                  <Alert variant="success" className="mb-0 small">
                    <strong>üéÆ –ì–æ—Ç–æ–≤–æ!</strong> –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!
                  </Alert>
                )}
                {canStartGame && !isRoomCreator && (
                  <Alert variant="info" className="mb-0 small">
                    <strong>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ:</strong> –í—Å–µ –≥–æ—Ç–æ–≤—ã! –ñ–¥–µ–º –∫–æ–≥–¥–∞ —Ö–æ—Å—Ç –Ω–∞—á–Ω–µ—Ç –∏–≥—Ä—É.
                  </Alert>
                )}
              </div>
            </Card.Body>
          </Card>

        </Col>
      </Row>
    </Container>
  );
};

export default GameRoomPage;
