// src/pages/GameRoomPage.tsx - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–¢–ê–†–¢ –ò–ì–†–´
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Alert, Spinner, Badge, ProgressBar } from 'react-bootstrap';
import { useGame } from '../context/GameProvider';

const GameRoomPage: React.FC = () => {
  const { roomId } = useParams<{ roomId: string }>();
  const navigate = useNavigate();
  
  const {
    currentRoom,
    currentPlayer,
    isConnected,
    gameState,
    setReady,
    leaveRoom,
    error,
    clearError,
    autoStartInfo, // ‚úÖ –ù–û–í–û–ï
    notification, // ‚úÖ –ù–û–í–û–ï
    clearNotification, // ‚úÖ –ù–û–í–û–ï
    telegramUser
  } = useGame();

  const [isLoading, setIsLoading] = useState(true);
  const [forceRender, setForceRender] = useState(0); // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ currentRoom
  useEffect(() => {
    console.log('üîÑ currentRoom changed, forcing rerender...', {
      roomId: currentRoom?.id,
      players: currentRoom?.players?.map(p => ({ id: p.id, name: p.name })),
      playersCount: currentRoom?.players?.length
    });
    setForceRender(prev => prev + 1);
  }, [currentRoom, currentRoom?.players, currentRoom?.players?.length]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  useEffect(() => {
    if (!isConnected) return;

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (gameState && currentRoom?.id === roomId) {
      navigate(`/game/${roomId}`);
      return;
    } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –Ω–µ —Ç–∞ –∫–æ–º–Ω–∞—Ç–∞
    if (!currentRoom || currentRoom.id !== roomId) {
      console.warn('Room mismatch or not found');
      setTimeout(() => {
        setIsLoading(false);
      }, 2000);
    } else {
      setIsLoading(false);
    } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
  }, [isConnected, currentRoom, roomId, gameState, navigate]);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
  useEffect(() => {
    if (gameState && currentRoom?.id === roomId) {
      navigate(`/game/${roomId}`);
    } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
  }, [gameState, currentRoom, roomId, navigate]);

  // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => {
        clearNotification();
      }, 5000); // 5 —Å–µ–∫—É–Ω–¥
      
      return () => clearTimeout(timer);
    } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
  }, [notification, clearNotification]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (!isConnected || isLoading) {
    return (
      <Container className="py-4">
        <Row>
          <Col md={8} className="mx-auto text-center">
            <Card>
              <Card.Body>
                <Spinner animation="border" className="mb-3" />
                <h5>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ...</h5>
                <p className="text-muted">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã</p>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </Container>
    );
  } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞

  // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  if (!currentRoom) {
    return (
      <Container className="py-4">
        <Row>
          <Col md={8} className="mx-auto">
            <Alert variant="danger">
              <Alert.Heading>–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</Alert.Heading>
              <p>–ö–æ–º–Ω–∞—Ç–∞ —Å ID {roomId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –Ω–µ–π.</p>
              <Button variant="outline-primary" onClick={() => navigate('/rooms')}>
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç
              </Button>
            </Alert>
          </Col>
        </Row>
      </Container>
    );
  } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞

  // –õ–æ–≥–∏–∫–∞ –∫–æ–º–Ω–∞—Ç—ã
  const isPlayerReady = currentPlayer?.isReady || false;
  const connectedPlayers = currentRoom.players.filter(p => p.isConnected !== false);
  const readyPlayers = connectedPlayers.filter(p => p.isReady);

  const handleReadyToggle = () => {
    setReady();
  };

  const handleLeaveRoom = () => {
    leaveRoom();
    navigate('/rooms');
  };

  const getPlayerStatus = (player: any) => {
    if (!player.isConnected && player.isConnected !== undefined) {
      return <Badge bg="secondary">–û—Ç–∫–ª—é—á–µ–Ω</Badge>;
    } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    
    if (player.isReady) {
      return <Badge bg="success">–ì–æ—Ç–æ–≤ ‚úì</Badge>;
    } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    
    return <Badge bg="warning">–ñ–¥–µ—Ç...</Badge>;
  };

  const getGameModeText = (gameMode: string) => {
    switch (gameMode) {
      case 'classic': return '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π';
      case 'transferable': return '–ü–µ—Ä–µ–≤–æ–¥–Ω–æ–π';
      default: return gameMode;
    } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
  };

  const getThrowingModeText = (throwingMode: string) => {
    switch (throwingMode) {
      case 'standard': return '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ';
      case 'smart': return '–£–º–Ω–æ–µ';
      default: return throwingMode;
    } // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
  };

  return (
    <Container className="py-4" key={forceRender}> {/* ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: key –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ */}
      <Row>
        <Col lg={8} className="mx-auto">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–Ω–∞—Ç—ã */}
          <Card className="mb-4">
            <Card.Header className="d-flex justify-content-between align-items-center">
              <div>
                <h5 className="mb-0">üè† {currentRoom.name}</h5>
                <small className="text-muted">ID: {currentRoom.id}</small>
              </div>
              <Badge bg={currentRoom.status === 'waiting' ? 'primary' : 'success'}>
                {currentRoom.status === 'waiting' ? '–û–∂–∏–¥–∞–Ω–∏–µ' : '–í –∏–≥—Ä–µ'}
              </Badge>
            </Card.Header>
            
            {/* ‚úÖ –ê–í–¢–û–°–¢–ê–†–¢ –°–¢–ê–¢–£–° */}
            {autoStartInfo?.isAutoStarting && (
              <Alert variant="success" className="mb-0">
                <div className="d-flex justify-content-between align-items-center">
                  <div>
                    <strong>üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {autoStartInfo.countdown} —Å–µ–∫!</strong>
                  </div>
                  <Spinner animation="border" size="sm" />
                </div>
              </Alert>
            )}

            {/* ‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø */}
            {notification && !autoStartInfo?.isAutoStarting && (
              <Alert 
                variant={notification.includes('‚úÖ') || notification.includes('üéÆ') ? 'success' : 'info'} 
                className="mb-0"
                dismissible
                onClose={clearNotification}
              >
                {notification}
              </Alert>
            )}
          </Card>

          {/* –û—à–∏–±–∫–∏ */}
          {error && (
            <Alert variant="danger" className="mb-4" dismissible onClose={clearError}>
              <Alert.Heading>–û—à–∏–±–∫–∞</Alert.Heading>
              {error}
            </Alert>
          )}

          {/* –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã */}
          <Card className="mb-4">
            <Card.Header>
              <h6 className="mb-0">‚öôÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h6>
            </Card.Header>
            <Card.Body>
              <Row>
                <Col md={3}>
                  <div className="text-center">
                    <div className="fw-bold">{getGameModeText(currentRoom.rules.gameMode)}</div>
                    <small className="text-muted">–†–µ–∂–∏–º</small>
                  </div>
                </Col>
                <Col md={3}>
                  <div className="text-center">
                    <div className="fw-bold">{currentRoom.rules.cardCount}</div>
                    <small className="text-muted">–ö–∞—Ä—Ç</small>
                  </div>
                </Col>
                <Col md={3}>
                  <div className="text-center">
                    <div className="fw-bold">{getThrowingModeText(currentRoom.rules.throwingMode)}</div>
                    <small className="text-muted">–ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ</small>
                  </div>
                </Col>
                <Col md={3}>
                  <div className="text-center">
                    <div className="fw-bold">{currentRoom.maxPlayers}</div>
                    <small className="text-muted">–ú–∞–∫—Å. –∏–≥—Ä–æ–∫–æ–≤</small>
                  </div>
                </Col>
              </Row>
            </Card.Body>
          </Card>

          {/* ‚úÖ –ê–í–¢–û–°–¢–ê–†–¢ –ü–†–û–ì–†–ï–°–° */}
          <Card className="mb-4">
            <Card.Header className="d-flex justify-content-between align-items-center">
              <h6 className="mb-0">üë• –ò–≥—Ä–æ–∫–∏ ({connectedPlayers.length}/{currentRoom.maxPlayers})</h6>
              <div>
                {autoStartInfo ? (
                  <Badge bg={autoStartInfo.allReady ? 'success' : 'warning'}>
                    –ì–æ—Ç–æ–≤—ã: {autoStartInfo.readyCount}/{autoStartInfo.totalCount}
                  </Badge>
                ) : (
                  <Badge bg={readyPlayers.length === connectedPlayers.length && connectedPlayers.length >= 2 ? 'success' : 'warning'}>
                    –ì–æ—Ç–æ–≤—ã: {readyPlayers.length}/{connectedPlayers.length}
                  </Badge>
                )}
              </div>
            </Card.Header>

            {/* ‚úÖ –ü–†–û–ì–†–ï–°–°-–ë–ê–† –ê–í–¢–û–°–¢–ê–†–¢–ê */}
            <Card.Body>
              <div className="mb-3">
                <div className="d-flex justify-content-between mb-1">
                  <small>–ü—Ä–æ–≥—Ä–µ—Å—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏</small>
                  <small>
                    {autoStartInfo ? 
                      `${autoStartInfo.readyCount}/${autoStartInfo.totalCount}` : 
                      `${readyPlayers.length}/${connectedPlayers.length}`
                    }
                  </small>
                </div>
                <ProgressBar 
                  now={autoStartInfo ? 
                    (autoStartInfo.readyCount / Math.max(autoStartInfo.totalCount, 1)) * 100 : 
                    (readyPlayers.length / Math.max(connectedPlayers.length, 1)) * 100
                  }
                  variant={autoStartInfo?.allReady ? 'success' : 'primary'}
                />
              </div>

              {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
              <div className="mb-3">
                {currentRoom.players.map((player, index) => (
                  <div key={`${player.id}-${forceRender}`} className="d-flex align-items-center mb-2 p-2 border rounded"> {/* ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: key —Å forceRender */}
                    {/* –ê–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞ */}
                    <div className="me-3">
                      {player.telegramId && player.avatar ? (
                        <img 
                          src={player.avatar} 
                          alt={player.name}
                          className="rounded-circle"
                          width="40"
                          height="40"
                        />
                      ) : (
                        <div 
                          className="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center"
                          style={{ width: '40px', height: '40px' }}
                        >
                          {player.name.charAt(0).toUpperCase()}
                        </div>
                      )}
                    </div>

                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ */}
                    <div className="flex-grow-1">
                      <div className="fw-bold">
                        {player.name}
                        {player.id === currentPlayer?.id && <small className="text-muted ms-1">(–í—ã)</small>}
                        {index === 0 && <Badge bg="info" className="ms-2">–•–æ—Å—Ç</Badge>}
                      </div>
                      {player.username && (
                        <small className="text-muted">@{player.username}</small>
                      )}
                    </div>

                    {/* –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
                    <div>
                      {getPlayerStatus(player)}
                    </div>
                  </div>
                ))}

                {/* –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ */}
                {connectedPlayers.length < currentRoom.maxPlayers && (
                  <>
                    {Array.from({ length: currentRoom.maxPlayers - connectedPlayers.length }).map((_, index) => (
                      <div key={`empty-${index}-${forceRender}`} className="d-flex align-items-center mb-2 p-2 border rounded border-dashed"> {/* ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: key —Å forceRender */}
                        <div className="me-3">
                          <div 
                            className="rounded-circle bg-light border d-flex align-items-center justify-content-center"
                            style={{ width: '40px', height: '40px' }}
                          >
                            ?
                          </div>
                        </div>
                        <div className="flex-grow-1">
                          <div className="text-muted">–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...</div>
                          <small className="text-muted">–°–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω</small>
                        </div>
                        <Badge bg="secondary">–°–≤–æ–±–æ–¥–Ω–æ</Badge>
                      </div>
                    ))}
                  </>
                )}
              </div>
            </Card.Body>
          </Card>

          {/* ‚úÖ –î–ï–ô–°–¢–í–ò–Ø –ë–ï–ó –ö–ù–û–ü–ö–ò "–ù–ê–ß–ê–¢–¨ –ò–ì–†–£" */}
          <Card>
            <Card.Body>
              <div className="d-grid gap-2">
                {/* –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
                <Button 
                  variant={isPlayerReady ? 'success' : 'outline-primary'}
                  size="lg"
                  onClick={handleReadyToggle}
                  disabled={autoStartInfo?.isAutoStarting}
                >
                  {isPlayerReady ? (
                    <>
                      <i className="bi bi-check-circle-fill me-2"></i>
                      –ì–æ—Ç–æ–≤! (–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å)
                    </>
                  ) : (
                    <>
                      <i className="bi bi-circle me-2"></i>
                      –ù–∞–∂–º–∏—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã
                    </>
                  )}
                </Button>

                {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
                <Button 
                  variant="outline-danger" 
                  onClick={handleLeaveRoom}
                  disabled={autoStartInfo?.isAutoStarting}
                >
                  <i className="bi bi-box-arrow-left me-2"></i>
                  –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
                </Button>
              </div>

              {/* ‚úÖ –ê–í–¢–û–°–¢–ê–†–¢ –ü–û–î–°–ö–ê–ó–ö–ò */}
              <div className="mt-3">
                {autoStartInfo?.needMorePlayers && (
                  <Alert variant="info" className="mb-2">
                    <i className="bi bi-info-circle me-2"></i>
                    <strong>üí° –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤:</strong> –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.
                    –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
                  </Alert>
                )}

                {autoStartInfo && !autoStartInfo.needMorePlayers && !autoStartInfo.allReady && (
                  <Alert variant="warning" className="mb-2">
                    <i className="bi bi-clock me-2"></i>
                    <strong>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</strong> –ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã.
                    –ì–æ—Ç–æ–≤—ã—Ö: {autoStartInfo.readyCount} –∏–∑ {autoStartInfo.totalCount}
                  </Alert>
                )}

                {autoStartInfo?.allReady && !autoStartInfo.isAutoStarting && (
                  <Alert variant="success" className="mb-2">
                    <i className="bi bi-play-circle me-2"></i>
                    <strong>üéÆ –ì–æ—Ç–æ–≤–æ!</strong> –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã. –ò–≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
                  </Alert>
                )}

                {!autoStartInfo && connectedPlayers.length < 2 && (
                  <Alert variant="info" className="mb-2">
                    <i className="bi bi-people me-2"></i>
                    <strong>üí° –°–æ–≤–µ—Ç:</strong> –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.
                  </Alert>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–µ */}
                <small className="text-muted">
                  <i className="bi bi-lightning me-1"></i>
                  –ò–≥—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞–∂–º—É—Ç "–ì–æ—Ç–æ–≤"
                </small>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default GameRoomPage;
